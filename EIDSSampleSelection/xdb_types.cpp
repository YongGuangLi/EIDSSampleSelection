/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "xdb_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>




PointDetail::~PointDetail() noexcept {
}


void PointDetail::__set_name(const std::string& val) {
  this->name = val;
}

void PointDetail::__set_dir(const std::string& val) {
  this->dir = val;
}

void PointDetail::__set_unit(const std::string& val) {
  this->unit = val;
}

void PointDetail::__set_desc(const std::string& val) {
  this->desc = val;
}

void PointDetail::__set_exName(const std::string& val) {
  this->exName = val;
}

void PointDetail::__set_minValue(const double val) {
  this->minValue = val;
}

void PointDetail::__set_maxValue(const double val) {
  this->maxValue = val;
}

void PointDetail::__set_lowValue(const double val) {
  this->lowValue = val;
}

void PointDetail::__set_middleValue(const double val) {
  this->middleValue = val;
}

void PointDetail::__set_highValue(const double val) {
  this->highValue = val;
}

void PointDetail::__set_curValue(const double val) {
  this->curValue = val;
}

void PointDetail::__set_time(const int64_t val) {
  this->time = val;
}

void PointDetail::__set_bussType(const std::string& val) {
  this->bussType = val;
}
std::ostream& operator<<(std::ostream& out, const PointDetail& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t PointDetail::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->dir);
          this->__isset.dir = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->unit);
          this->__isset.unit = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->desc);
          this->__isset.desc = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->exName);
          this->__isset.exName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->minValue);
          this->__isset.minValue = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->maxValue);
          this->__isset.maxValue = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->lowValue);
          this->__isset.lowValue = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->middleValue);
          this->__isset.middleValue = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->highValue);
          this->__isset.highValue = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->curValue);
          this->__isset.curValue = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->time);
          this->__isset.time = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->bussType);
          this->__isset.bussType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t PointDetail::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("PointDetail");

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dir", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->dir);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("unit", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->unit);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("desc", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->desc);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("exName", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->exName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("minValue", ::apache::thrift::protocol::T_DOUBLE, 6);
  xfer += oprot->writeDouble(this->minValue);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("maxValue", ::apache::thrift::protocol::T_DOUBLE, 7);
  xfer += oprot->writeDouble(this->maxValue);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("lowValue", ::apache::thrift::protocol::T_DOUBLE, 8);
  xfer += oprot->writeDouble(this->lowValue);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("middleValue", ::apache::thrift::protocol::T_DOUBLE, 9);
  xfer += oprot->writeDouble(this->middleValue);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("highValue", ::apache::thrift::protocol::T_DOUBLE, 10);
  xfer += oprot->writeDouble(this->highValue);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("curValue", ::apache::thrift::protocol::T_DOUBLE, 11);
  xfer += oprot->writeDouble(this->curValue);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("time", ::apache::thrift::protocol::T_I64, 12);
  xfer += oprot->writeI64(this->time);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("bussType", ::apache::thrift::protocol::T_STRING, 13);
  xfer += oprot->writeString(this->bussType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(PointDetail &a, PointDetail &b) {
  using ::std::swap;
  swap(a.name, b.name);
  swap(a.dir, b.dir);
  swap(a.unit, b.unit);
  swap(a.desc, b.desc);
  swap(a.exName, b.exName);
  swap(a.minValue, b.minValue);
  swap(a.maxValue, b.maxValue);
  swap(a.lowValue, b.lowValue);
  swap(a.middleValue, b.middleValue);
  swap(a.highValue, b.highValue);
  swap(a.curValue, b.curValue);
  swap(a.time, b.time);
  swap(a.bussType, b.bussType);
  swap(a.__isset, b.__isset);
}

PointDetail::PointDetail(const PointDetail& other0) {
  name = other0.name;
  dir = other0.dir;
  unit = other0.unit;
  desc = other0.desc;
  exName = other0.exName;
  minValue = other0.minValue;
  maxValue = other0.maxValue;
  lowValue = other0.lowValue;
  middleValue = other0.middleValue;
  highValue = other0.highValue;
  curValue = other0.curValue;
  time = other0.time;
  bussType = other0.bussType;
  __isset = other0.__isset;
}
PointDetail& PointDetail::operator=(const PointDetail& other1) {
  name = other1.name;
  dir = other1.dir;
  unit = other1.unit;
  desc = other1.desc;
  exName = other1.exName;
  minValue = other1.minValue;
  maxValue = other1.maxValue;
  lowValue = other1.lowValue;
  middleValue = other1.middleValue;
  highValue = other1.highValue;
  curValue = other1.curValue;
  time = other1.time;
  bussType = other1.bussType;
  __isset = other1.__isset;
  return *this;
}
void PointDetail::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "PointDetail(";
  out << "name=" << to_string(name);
  out << ", " << "dir=" << to_string(dir);
  out << ", " << "unit=" << to_string(unit);
  out << ", " << "desc=" << to_string(desc);
  out << ", " << "exName=" << to_string(exName);
  out << ", " << "minValue=" << to_string(minValue);
  out << ", " << "maxValue=" << to_string(maxValue);
  out << ", " << "lowValue=" << to_string(lowValue);
  out << ", " << "middleValue=" << to_string(middleValue);
  out << ", " << "highValue=" << to_string(highValue);
  out << ", " << "curValue=" << to_string(curValue);
  out << ", " << "time=" << to_string(time);
  out << ", " << "bussType=" << to_string(bussType);
  out << ")";
}


Point::~Point() noexcept {
}


void Point::__set_name(const std::string& val) {
  this->name = val;
}

void Point::__set_dir(const std::string& val) {
  this->dir = val;
}

void Point::__set_value(const double val) {
  this->value = val;
}

void Point::__set_time(const int64_t val) {
  this->time = val;
}

void Point::__set_exName(const std::string& val) {
  this->exName = val;
}
std::ostream& operator<<(std::ostream& out, const Point& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t Point::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->dir);
          this->__isset.dir = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->value);
          this->__isset.value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->time);
          this->__isset.time = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->exName);
          this->__isset.exName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Point::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Point");

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dir", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->dir);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("value", ::apache::thrift::protocol::T_DOUBLE, 3);
  xfer += oprot->writeDouble(this->value);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("time", ::apache::thrift::protocol::T_I64, 4);
  xfer += oprot->writeI64(this->time);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("exName", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->exName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Point &a, Point &b) {
  using ::std::swap;
  swap(a.name, b.name);
  swap(a.dir, b.dir);
  swap(a.value, b.value);
  swap(a.time, b.time);
  swap(a.exName, b.exName);
  swap(a.__isset, b.__isset);
}

Point::Point(const Point& other2) {
  name = other2.name;
  dir = other2.dir;
  value = other2.value;
  time = other2.time;
  exName = other2.exName;
  __isset = other2.__isset;
}
Point& Point::operator=(const Point& other3) {
  name = other3.name;
  dir = other3.dir;
  value = other3.value;
  time = other3.time;
  exName = other3.exName;
  __isset = other3.__isset;
  return *this;
}
void Point::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Point(";
  out << "name=" << to_string(name);
  out << ", " << "dir=" << to_string(dir);
  out << ", " << "value=" << to_string(value);
  out << ", " << "time=" << to_string(time);
  out << ", " << "exName=" << to_string(exName);
  out << ")";
}


HisQuery::~HisQuery() noexcept {
}


void HisQuery::__set_name(const std::string& val) {
  this->name = val;
}

void HisQuery::__set_dir(const std::string& val) {
  this->dir = val;
}

void HisQuery::__set_startTime(const int64_t val) {
  this->startTime = val;
}

void HisQuery::__set_endTime(const int64_t val) {
  this->endTime = val;
}

void HisQuery::__set_isFilter(const bool val) {
  this->isFilter = val;
}

void HisQuery::__set_minValue(const double val) {
  this->minValue = val;
}

void HisQuery::__set_maxValue(const double val) {
  this->maxValue = val;
}

void HisQuery::__set_interval(const int32_t val) {
  this->interval = val;
}

void HisQuery::__set_pageSize(const int32_t val) {
  this->pageSize = val;
}

void HisQuery::__set_nextTime(const int64_t val) {
  this->nextTime = val;
}

void HisQuery::__set_aggType(const int32_t val) {
  this->aggType = val;
}

void HisQuery::__set_results(const std::vector<Point> & val) {
  this->results = val;
}

void HisQuery::__set_sdtDelta(const double val) {
  this->sdtDelta = val;
}
std::ostream& operator<<(std::ostream& out, const HisQuery& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t HisQuery::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->dir);
          this->__isset.dir = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->startTime);
          this->__isset.startTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->endTime);
          this->__isset.endTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->isFilter);
          this->__isset.isFilter = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->minValue);
          this->__isset.minValue = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->maxValue);
          this->__isset.maxValue = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->interval);
          this->__isset.interval = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->pageSize);
          this->__isset.pageSize = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->nextTime);
          this->__isset.nextTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->aggType);
          this->__isset.aggType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->results.clear();
            uint32_t _size4;
            ::apache::thrift::protocol::TType _etype7;
            xfer += iprot->readListBegin(_etype7, _size4);
            this->results.resize(_size4);
            uint32_t _i8;
            for (_i8 = 0; _i8 < _size4; ++_i8)
            {
              xfer += this->results[_i8].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.results = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->sdtDelta);
          this->__isset.sdtDelta = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t HisQuery::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("HisQuery");

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dir", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->dir);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("startTime", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->startTime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("endTime", ::apache::thrift::protocol::T_I64, 4);
  xfer += oprot->writeI64(this->endTime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("isFilter", ::apache::thrift::protocol::T_BOOL, 5);
  xfer += oprot->writeBool(this->isFilter);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("minValue", ::apache::thrift::protocol::T_DOUBLE, 6);
  xfer += oprot->writeDouble(this->minValue);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("maxValue", ::apache::thrift::protocol::T_DOUBLE, 7);
  xfer += oprot->writeDouble(this->maxValue);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("interval", ::apache::thrift::protocol::T_I32, 8);
  xfer += oprot->writeI32(this->interval);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("pageSize", ::apache::thrift::protocol::T_I32, 9);
  xfer += oprot->writeI32(this->pageSize);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("nextTime", ::apache::thrift::protocol::T_I64, 10);
  xfer += oprot->writeI64(this->nextTime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("aggType", ::apache::thrift::protocol::T_I32, 11);
  xfer += oprot->writeI32(this->aggType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("results", ::apache::thrift::protocol::T_LIST, 12);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->results.size()));
    std::vector<Point> ::const_iterator _iter9;
    for (_iter9 = this->results.begin(); _iter9 != this->results.end(); ++_iter9)
    {
      xfer += (*_iter9).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("sdtDelta", ::apache::thrift::protocol::T_DOUBLE, 13);
  xfer += oprot->writeDouble(this->sdtDelta);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(HisQuery &a, HisQuery &b) {
  using ::std::swap;
  swap(a.name, b.name);
  swap(a.dir, b.dir);
  swap(a.startTime, b.startTime);
  swap(a.endTime, b.endTime);
  swap(a.isFilter, b.isFilter);
  swap(a.minValue, b.minValue);
  swap(a.maxValue, b.maxValue);
  swap(a.interval, b.interval);
  swap(a.pageSize, b.pageSize);
  swap(a.nextTime, b.nextTime);
  swap(a.aggType, b.aggType);
  swap(a.results, b.results);
  swap(a.sdtDelta, b.sdtDelta);
  swap(a.__isset, b.__isset);
}

HisQuery::HisQuery(const HisQuery& other10) {
  name = other10.name;
  dir = other10.dir;
  startTime = other10.startTime;
  endTime = other10.endTime;
  isFilter = other10.isFilter;
  minValue = other10.minValue;
  maxValue = other10.maxValue;
  interval = other10.interval;
  pageSize = other10.pageSize;
  nextTime = other10.nextTime;
  aggType = other10.aggType;
  results = other10.results;
  sdtDelta = other10.sdtDelta;
  __isset = other10.__isset;
}
HisQuery& HisQuery::operator=(const HisQuery& other11) {
  name = other11.name;
  dir = other11.dir;
  startTime = other11.startTime;
  endTime = other11.endTime;
  isFilter = other11.isFilter;
  minValue = other11.minValue;
  maxValue = other11.maxValue;
  interval = other11.interval;
  pageSize = other11.pageSize;
  nextTime = other11.nextTime;
  aggType = other11.aggType;
  results = other11.results;
  sdtDelta = other11.sdtDelta;
  __isset = other11.__isset;
  return *this;
}
void HisQuery::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "HisQuery(";
  out << "name=" << to_string(name);
  out << ", " << "dir=" << to_string(dir);
  out << ", " << "startTime=" << to_string(startTime);
  out << ", " << "endTime=" << to_string(endTime);
  out << ", " << "isFilter=" << to_string(isFilter);
  out << ", " << "minValue=" << to_string(minValue);
  out << ", " << "maxValue=" << to_string(maxValue);
  out << ", " << "interval=" << to_string(interval);
  out << ", " << "pageSize=" << to_string(pageSize);
  out << ", " << "nextTime=" << to_string(nextTime);
  out << ", " << "aggType=" << to_string(aggType);
  out << ", " << "results=" << to_string(results);
  out << ", " << "sdtDelta=" << to_string(sdtDelta);
  out << ")";
}


DetailQuery::~DetailQuery() noexcept {
}


void DetailQuery::__set_name(const std::string& val) {
  this->name = val;
}

void DetailQuery::__set_dir(const std::string& val) {
  this->dir = val;
}

void DetailQuery::__set_exName(const std::string& val) {
  this->exName = val;
}

void DetailQuery::__set_desc(const std::string& val) {
  this->desc = val;
}

void DetailQuery::__set_pageSize(const int32_t val) {
  this->pageSize = val;
}

void DetailQuery::__set_lastKey(const std::string& val) {
  this->lastKey = val;
}

void DetailQuery::__set_type(const int32_t val) {
  this->type = val;
}

void DetailQuery::__set_hasNext(const bool val) {
  this->hasNext = val;
}

void DetailQuery::__set_results(const std::vector<PointDetail> & val) {
  this->results = val;
}

void DetailQuery::__set_unit(const std::string& val) {
  this->unit = val;
}
std::ostream& operator<<(std::ostream& out, const DetailQuery& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t DetailQuery::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->dir);
          this->__isset.dir = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->exName);
          this->__isset.exName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->desc);
          this->__isset.desc = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->pageSize);
          this->__isset.pageSize = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->lastKey);
          this->__isset.lastKey = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->type);
          this->__isset.type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->hasNext);
          this->__isset.hasNext = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->results.clear();
            uint32_t _size12;
            ::apache::thrift::protocol::TType _etype15;
            xfer += iprot->readListBegin(_etype15, _size12);
            this->results.resize(_size12);
            uint32_t _i16;
            for (_i16 = 0; _i16 < _size12; ++_i16)
            {
              xfer += this->results[_i16].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.results = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->unit);
          this->__isset.unit = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t DetailQuery::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("DetailQuery");

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dir", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->dir);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("exName", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->exName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("desc", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->desc);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("pageSize", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->pageSize);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("lastKey", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeString(this->lastKey);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_I32, 7);
  xfer += oprot->writeI32(this->type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("hasNext", ::apache::thrift::protocol::T_BOOL, 8);
  xfer += oprot->writeBool(this->hasNext);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("results", ::apache::thrift::protocol::T_LIST, 9);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->results.size()));
    std::vector<PointDetail> ::const_iterator _iter17;
    for (_iter17 = this->results.begin(); _iter17 != this->results.end(); ++_iter17)
    {
      xfer += (*_iter17).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("unit", ::apache::thrift::protocol::T_STRING, 10);
  xfer += oprot->writeString(this->unit);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(DetailQuery &a, DetailQuery &b) {
  using ::std::swap;
  swap(a.name, b.name);
  swap(a.dir, b.dir);
  swap(a.exName, b.exName);
  swap(a.desc, b.desc);
  swap(a.pageSize, b.pageSize);
  swap(a.lastKey, b.lastKey);
  swap(a.type, b.type);
  swap(a.hasNext, b.hasNext);
  swap(a.results, b.results);
  swap(a.unit, b.unit);
  swap(a.__isset, b.__isset);
}

DetailQuery::DetailQuery(const DetailQuery& other18) {
  name = other18.name;
  dir = other18.dir;
  exName = other18.exName;
  desc = other18.desc;
  pageSize = other18.pageSize;
  lastKey = other18.lastKey;
  type = other18.type;
  hasNext = other18.hasNext;
  results = other18.results;
  unit = other18.unit;
  __isset = other18.__isset;
}
DetailQuery& DetailQuery::operator=(const DetailQuery& other19) {
  name = other19.name;
  dir = other19.dir;
  exName = other19.exName;
  desc = other19.desc;
  pageSize = other19.pageSize;
  lastKey = other19.lastKey;
  type = other19.type;
  hasNext = other19.hasNext;
  results = other19.results;
  unit = other19.unit;
  __isset = other19.__isset;
  return *this;
}
void DetailQuery::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "DetailQuery(";
  out << "name=" << to_string(name);
  out << ", " << "dir=" << to_string(dir);
  out << ", " << "exName=" << to_string(exName);
  out << ", " << "desc=" << to_string(desc);
  out << ", " << "pageSize=" << to_string(pageSize);
  out << ", " << "lastKey=" << to_string(lastKey);
  out << ", " << "type=" << to_string(type);
  out << ", " << "hasNext=" << to_string(hasNext);
  out << ", " << "results=" << to_string(results);
  out << ", " << "unit=" << to_string(unit);
  out << ")";
}


