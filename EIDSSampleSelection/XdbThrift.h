/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef XdbThrift_H
#define XdbThrift_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include <memory>
#include "xdb_types.h"



#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class XdbThriftIf {
 public:
  virtual ~XdbThriftIf() {}
  virtual void putPoints(std::string& _return, const std::vector<PointDetail> & points) = 0;
  virtual void deletePoints(std::string& _return, const std::vector<PointDetail> & points, const bool delReal) = 0;
  virtual void putRealPoints(std::string& _return, const std::vector<Point> & points) = 0;
  virtual void _putPoints(const std::vector<PointDetail> & points) = 0;
  virtual void _deletePoints(const std::vector<PointDetail> & points, const bool delReal) = 0;
  virtual void _putRealPoints(const std::vector<Point> & points) = 0;
  virtual void getRealPoints(std::vector<Point> & _return, const std::vector<Point> & points) = 0;
  virtual void getRealPointsWithResulMap(std::map<std::string, Point> & _return, const std::vector<Point> & points) = 0;
  virtual void getHistoryPoints(std::vector<Point> & _return, const HisQuery& hq) = 0;
  virtual void getHistoryPointsByPage(HisQuery& _return, const HisQuery& hq) = 0;
  virtual bool checkPoint(const Point& p) = 0;
  virtual void validatePoint(std::string& _return, const PointDetail& pd) = 0;
  virtual void createDir(std::string& _return, const std::vector<std::string> & dirs) = 0;
  virtual void deleteDirs(std::string& _return, const std::vector<std::string> & dirs) = 0;
  virtual void getDirs(std::vector<std::string> & _return) = 0;
  virtual void getPoints(DetailQuery& _return, const DetailQuery& pq) = 0;
  virtual void getCountByDir(std::map<std::string, int64_t> & _return, const std::vector<std::string> & dirs) = 0;
  virtual void getPointsByFullName(std::vector<PointDetail> & _return, const std::vector<std::string> & fullNames, const bool needRealData) = 0;
  virtual void getHistoryPointsByIndividual(std::vector<HisQuery> & _return, const std::vector<HisQuery> & hq) = 0;
  virtual void importHistoryPoints(std::string& _return, const std::vector<Point> & points) = 0;
  virtual void deleteHistoryPoints(const std::vector<HisQuery> & hqs) = 0;
  virtual void getPointsByName(std::vector<PointDetail> & _return, const std::vector<PointDetail> & points) = 0;
  virtual void getPointsByExName(std::vector<PointDetail> & _return, const std::vector<PointDetail> & points) = 0;
  virtual void putRealPointsByExName(std::string& _return, const std::vector<Point> & points) = 0;
  virtual void getRealPointsByExName(std::vector<Point> & _return, const std::vector<Point> & points) = 0;
  virtual void getHistoryPointsByExName(std::vector<Point> & _return, const HisQuery& hq) = 0;
  virtual void test(std::string& _return, const std::string& test) = 0;
  virtual int64_t getCurServerTime() = 0;
};

class XdbThriftIfFactory {
 public:
  typedef XdbThriftIf Handler;

  virtual ~XdbThriftIfFactory() {}

  virtual XdbThriftIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(XdbThriftIf* /* handler */) = 0;
};

class XdbThriftIfSingletonFactory : virtual public XdbThriftIfFactory {
 public:
  XdbThriftIfSingletonFactory(const ::std::shared_ptr<XdbThriftIf>& iface) : iface_(iface) {}
  virtual ~XdbThriftIfSingletonFactory() {}

  virtual XdbThriftIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(XdbThriftIf* /* handler */) {}

 protected:
  ::std::shared_ptr<XdbThriftIf> iface_;
};

class XdbThriftNull : virtual public XdbThriftIf {
 public:
  virtual ~XdbThriftNull() {}
  void putPoints(std::string& /* _return */, const std::vector<PointDetail> & /* points */) {
    return;
  }
  void deletePoints(std::string& /* _return */, const std::vector<PointDetail> & /* points */, const bool /* delReal */) {
    return;
  }
  void putRealPoints(std::string& /* _return */, const std::vector<Point> & /* points */) {
    return;
  }
  void _putPoints(const std::vector<PointDetail> & /* points */) {
    return;
  }
  void _deletePoints(const std::vector<PointDetail> & /* points */, const bool /* delReal */) {
    return;
  }
  void _putRealPoints(const std::vector<Point> & /* points */) {
    return;
  }
  void getRealPoints(std::vector<Point> & /* _return */, const std::vector<Point> & /* points */) {
    return;
  }
  void getRealPointsWithResulMap(std::map<std::string, Point> & /* _return */, const std::vector<Point> & /* points */) {
    return;
  }
  void getHistoryPoints(std::vector<Point> & /* _return */, const HisQuery& /* hq */) {
    return;
  }
  void getHistoryPointsByPage(HisQuery& /* _return */, const HisQuery& /* hq */) {
    return;
  }
  bool checkPoint(const Point& /* p */) {
    bool _return = false;
    return _return;
  }
  void validatePoint(std::string& /* _return */, const PointDetail& /* pd */) {
    return;
  }
  void createDir(std::string& /* _return */, const std::vector<std::string> & /* dirs */) {
    return;
  }
  void deleteDirs(std::string& /* _return */, const std::vector<std::string> & /* dirs */) {
    return;
  }
  void getDirs(std::vector<std::string> & /* _return */) {
    return;
  }
  void getPoints(DetailQuery& /* _return */, const DetailQuery& /* pq */) {
    return;
  }
  void getCountByDir(std::map<std::string, int64_t> & /* _return */, const std::vector<std::string> & /* dirs */) {
    return;
  }
  void getPointsByFullName(std::vector<PointDetail> & /* _return */, const std::vector<std::string> & /* fullNames */, const bool /* needRealData */) {
    return;
  }
  void getHistoryPointsByIndividual(std::vector<HisQuery> & /* _return */, const std::vector<HisQuery> & /* hq */) {
    return;
  }
  void importHistoryPoints(std::string& /* _return */, const std::vector<Point> & /* points */) {
    return;
  }
  void deleteHistoryPoints(const std::vector<HisQuery> & /* hqs */) {
    return;
  }
  void getPointsByName(std::vector<PointDetail> & /* _return */, const std::vector<PointDetail> & /* points */) {
    return;
  }
  void getPointsByExName(std::vector<PointDetail> & /* _return */, const std::vector<PointDetail> & /* points */) {
    return;
  }
  void putRealPointsByExName(std::string& /* _return */, const std::vector<Point> & /* points */) {
    return;
  }
  void getRealPointsByExName(std::vector<Point> & /* _return */, const std::vector<Point> & /* points */) {
    return;
  }
  void getHistoryPointsByExName(std::vector<Point> & /* _return */, const HisQuery& /* hq */) {
    return;
  }
  void test(std::string& /* _return */, const std::string& /* test */) {
    return;
  }
  int64_t getCurServerTime() {
    int64_t _return = 0;
    return _return;
  }
};

typedef struct _XdbThrift_putPoints_args__isset {
  _XdbThrift_putPoints_args__isset() : points(false) {}
  bool points :1;
} _XdbThrift_putPoints_args__isset;

class XdbThrift_putPoints_args {
 public:

  XdbThrift_putPoints_args(const XdbThrift_putPoints_args&);
  XdbThrift_putPoints_args& operator=(const XdbThrift_putPoints_args&);
  XdbThrift_putPoints_args() {
  }

  virtual ~XdbThrift_putPoints_args() noexcept;
  std::vector<PointDetail>  points;

  _XdbThrift_putPoints_args__isset __isset;

  void __set_points(const std::vector<PointDetail> & val);

  bool operator == (const XdbThrift_putPoints_args & rhs) const
  {
    if (!(points == rhs.points))
      return false;
    return true;
  }
  bool operator != (const XdbThrift_putPoints_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const XdbThrift_putPoints_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class XdbThrift_putPoints_pargs {
 public:


  virtual ~XdbThrift_putPoints_pargs() noexcept;
  const std::vector<PointDetail> * points;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _XdbThrift_putPoints_result__isset {
  _XdbThrift_putPoints_result__isset() : success(false) {}
  bool success :1;
} _XdbThrift_putPoints_result__isset;

class XdbThrift_putPoints_result {
 public:

  XdbThrift_putPoints_result(const XdbThrift_putPoints_result&);
  XdbThrift_putPoints_result& operator=(const XdbThrift_putPoints_result&);
  XdbThrift_putPoints_result() : success() {
  }

  virtual ~XdbThrift_putPoints_result() noexcept;
  std::string success;

  _XdbThrift_putPoints_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const XdbThrift_putPoints_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const XdbThrift_putPoints_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const XdbThrift_putPoints_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _XdbThrift_putPoints_presult__isset {
  _XdbThrift_putPoints_presult__isset() : success(false) {}
  bool success :1;
} _XdbThrift_putPoints_presult__isset;

class XdbThrift_putPoints_presult {
 public:


  virtual ~XdbThrift_putPoints_presult() noexcept;
  std::string* success;

  _XdbThrift_putPoints_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _XdbThrift_deletePoints_args__isset {
  _XdbThrift_deletePoints_args__isset() : points(false), delReal(false) {}
  bool points :1;
  bool delReal :1;
} _XdbThrift_deletePoints_args__isset;

class XdbThrift_deletePoints_args {
 public:

  XdbThrift_deletePoints_args(const XdbThrift_deletePoints_args&);
  XdbThrift_deletePoints_args& operator=(const XdbThrift_deletePoints_args&);
  XdbThrift_deletePoints_args() : delReal(0) {
  }

  virtual ~XdbThrift_deletePoints_args() noexcept;
  std::vector<PointDetail>  points;
  bool delReal;

  _XdbThrift_deletePoints_args__isset __isset;

  void __set_points(const std::vector<PointDetail> & val);

  void __set_delReal(const bool val);

  bool operator == (const XdbThrift_deletePoints_args & rhs) const
  {
    if (!(points == rhs.points))
      return false;
    if (!(delReal == rhs.delReal))
      return false;
    return true;
  }
  bool operator != (const XdbThrift_deletePoints_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const XdbThrift_deletePoints_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class XdbThrift_deletePoints_pargs {
 public:


  virtual ~XdbThrift_deletePoints_pargs() noexcept;
  const std::vector<PointDetail> * points;
  const bool* delReal;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _XdbThrift_deletePoints_result__isset {
  _XdbThrift_deletePoints_result__isset() : success(false) {}
  bool success :1;
} _XdbThrift_deletePoints_result__isset;

class XdbThrift_deletePoints_result {
 public:

  XdbThrift_deletePoints_result(const XdbThrift_deletePoints_result&);
  XdbThrift_deletePoints_result& operator=(const XdbThrift_deletePoints_result&);
  XdbThrift_deletePoints_result() : success() {
  }

  virtual ~XdbThrift_deletePoints_result() noexcept;
  std::string success;

  _XdbThrift_deletePoints_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const XdbThrift_deletePoints_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const XdbThrift_deletePoints_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const XdbThrift_deletePoints_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _XdbThrift_deletePoints_presult__isset {
  _XdbThrift_deletePoints_presult__isset() : success(false) {}
  bool success :1;
} _XdbThrift_deletePoints_presult__isset;

class XdbThrift_deletePoints_presult {
 public:


  virtual ~XdbThrift_deletePoints_presult() noexcept;
  std::string* success;

  _XdbThrift_deletePoints_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _XdbThrift_putRealPoints_args__isset {
  _XdbThrift_putRealPoints_args__isset() : points(false) {}
  bool points :1;
} _XdbThrift_putRealPoints_args__isset;

class XdbThrift_putRealPoints_args {
 public:

  XdbThrift_putRealPoints_args(const XdbThrift_putRealPoints_args&);
  XdbThrift_putRealPoints_args& operator=(const XdbThrift_putRealPoints_args&);
  XdbThrift_putRealPoints_args() {
  }

  virtual ~XdbThrift_putRealPoints_args() noexcept;
  std::vector<Point>  points;

  _XdbThrift_putRealPoints_args__isset __isset;

  void __set_points(const std::vector<Point> & val);

  bool operator == (const XdbThrift_putRealPoints_args & rhs) const
  {
    if (!(points == rhs.points))
      return false;
    return true;
  }
  bool operator != (const XdbThrift_putRealPoints_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const XdbThrift_putRealPoints_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class XdbThrift_putRealPoints_pargs {
 public:


  virtual ~XdbThrift_putRealPoints_pargs() noexcept;
  const std::vector<Point> * points;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _XdbThrift_putRealPoints_result__isset {
  _XdbThrift_putRealPoints_result__isset() : success(false) {}
  bool success :1;
} _XdbThrift_putRealPoints_result__isset;

class XdbThrift_putRealPoints_result {
 public:

  XdbThrift_putRealPoints_result(const XdbThrift_putRealPoints_result&);
  XdbThrift_putRealPoints_result& operator=(const XdbThrift_putRealPoints_result&);
  XdbThrift_putRealPoints_result() : success() {
  }

  virtual ~XdbThrift_putRealPoints_result() noexcept;
  std::string success;

  _XdbThrift_putRealPoints_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const XdbThrift_putRealPoints_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const XdbThrift_putRealPoints_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const XdbThrift_putRealPoints_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _XdbThrift_putRealPoints_presult__isset {
  _XdbThrift_putRealPoints_presult__isset() : success(false) {}
  bool success :1;
} _XdbThrift_putRealPoints_presult__isset;

class XdbThrift_putRealPoints_presult {
 public:


  virtual ~XdbThrift_putRealPoints_presult() noexcept;
  std::string* success;

  _XdbThrift_putRealPoints_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _XdbThrift__putPoints_args__isset {
  _XdbThrift__putPoints_args__isset() : points(false) {}
  bool points :1;
} _XdbThrift__putPoints_args__isset;

class XdbThrift__putPoints_args {
 public:

  XdbThrift__putPoints_args(const XdbThrift__putPoints_args&);
  XdbThrift__putPoints_args& operator=(const XdbThrift__putPoints_args&);
  XdbThrift__putPoints_args() {
  }

  virtual ~XdbThrift__putPoints_args() noexcept;
  std::vector<PointDetail>  points;

  _XdbThrift__putPoints_args__isset __isset;

  void __set_points(const std::vector<PointDetail> & val);

  bool operator == (const XdbThrift__putPoints_args & rhs) const
  {
    if (!(points == rhs.points))
      return false;
    return true;
  }
  bool operator != (const XdbThrift__putPoints_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const XdbThrift__putPoints_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class XdbThrift__putPoints_pargs {
 public:


  virtual ~XdbThrift__putPoints_pargs() noexcept;
  const std::vector<PointDetail> * points;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class XdbThrift__putPoints_result {
 public:

  XdbThrift__putPoints_result(const XdbThrift__putPoints_result&);
  XdbThrift__putPoints_result& operator=(const XdbThrift__putPoints_result&);
  XdbThrift__putPoints_result() {
  }

  virtual ~XdbThrift__putPoints_result() noexcept;

  bool operator == (const XdbThrift__putPoints_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const XdbThrift__putPoints_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const XdbThrift__putPoints_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class XdbThrift__putPoints_presult {
 public:


  virtual ~XdbThrift__putPoints_presult() noexcept;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _XdbThrift__deletePoints_args__isset {
  _XdbThrift__deletePoints_args__isset() : points(false), delReal(false) {}
  bool points :1;
  bool delReal :1;
} _XdbThrift__deletePoints_args__isset;

class XdbThrift__deletePoints_args {
 public:

  XdbThrift__deletePoints_args(const XdbThrift__deletePoints_args&);
  XdbThrift__deletePoints_args& operator=(const XdbThrift__deletePoints_args&);
  XdbThrift__deletePoints_args() : delReal(0) {
  }

  virtual ~XdbThrift__deletePoints_args() noexcept;
  std::vector<PointDetail>  points;
  bool delReal;

  _XdbThrift__deletePoints_args__isset __isset;

  void __set_points(const std::vector<PointDetail> & val);

  void __set_delReal(const bool val);

  bool operator == (const XdbThrift__deletePoints_args & rhs) const
  {
    if (!(points == rhs.points))
      return false;
    if (!(delReal == rhs.delReal))
      return false;
    return true;
  }
  bool operator != (const XdbThrift__deletePoints_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const XdbThrift__deletePoints_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class XdbThrift__deletePoints_pargs {
 public:


  virtual ~XdbThrift__deletePoints_pargs() noexcept;
  const std::vector<PointDetail> * points;
  const bool* delReal;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class XdbThrift__deletePoints_result {
 public:

  XdbThrift__deletePoints_result(const XdbThrift__deletePoints_result&);
  XdbThrift__deletePoints_result& operator=(const XdbThrift__deletePoints_result&);
  XdbThrift__deletePoints_result() {
  }

  virtual ~XdbThrift__deletePoints_result() noexcept;

  bool operator == (const XdbThrift__deletePoints_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const XdbThrift__deletePoints_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const XdbThrift__deletePoints_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class XdbThrift__deletePoints_presult {
 public:


  virtual ~XdbThrift__deletePoints_presult() noexcept;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _XdbThrift__putRealPoints_args__isset {
  _XdbThrift__putRealPoints_args__isset() : points(false) {}
  bool points :1;
} _XdbThrift__putRealPoints_args__isset;

class XdbThrift__putRealPoints_args {
 public:

  XdbThrift__putRealPoints_args(const XdbThrift__putRealPoints_args&);
  XdbThrift__putRealPoints_args& operator=(const XdbThrift__putRealPoints_args&);
  XdbThrift__putRealPoints_args() {
  }

  virtual ~XdbThrift__putRealPoints_args() noexcept;
  std::vector<Point>  points;

  _XdbThrift__putRealPoints_args__isset __isset;

  void __set_points(const std::vector<Point> & val);

  bool operator == (const XdbThrift__putRealPoints_args & rhs) const
  {
    if (!(points == rhs.points))
      return false;
    return true;
  }
  bool operator != (const XdbThrift__putRealPoints_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const XdbThrift__putRealPoints_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class XdbThrift__putRealPoints_pargs {
 public:


  virtual ~XdbThrift__putRealPoints_pargs() noexcept;
  const std::vector<Point> * points;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class XdbThrift__putRealPoints_result {
 public:

  XdbThrift__putRealPoints_result(const XdbThrift__putRealPoints_result&);
  XdbThrift__putRealPoints_result& operator=(const XdbThrift__putRealPoints_result&);
  XdbThrift__putRealPoints_result() {
  }

  virtual ~XdbThrift__putRealPoints_result() noexcept;

  bool operator == (const XdbThrift__putRealPoints_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const XdbThrift__putRealPoints_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const XdbThrift__putRealPoints_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class XdbThrift__putRealPoints_presult {
 public:


  virtual ~XdbThrift__putRealPoints_presult() noexcept;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _XdbThrift_getRealPoints_args__isset {
  _XdbThrift_getRealPoints_args__isset() : points(false) {}
  bool points :1;
} _XdbThrift_getRealPoints_args__isset;

class XdbThrift_getRealPoints_args {
 public:

  XdbThrift_getRealPoints_args(const XdbThrift_getRealPoints_args&);
  XdbThrift_getRealPoints_args& operator=(const XdbThrift_getRealPoints_args&);
  XdbThrift_getRealPoints_args() {
  }

  virtual ~XdbThrift_getRealPoints_args() noexcept;
  std::vector<Point>  points;

  _XdbThrift_getRealPoints_args__isset __isset;

  void __set_points(const std::vector<Point> & val);

  bool operator == (const XdbThrift_getRealPoints_args & rhs) const
  {
    if (!(points == rhs.points))
      return false;
    return true;
  }
  bool operator != (const XdbThrift_getRealPoints_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const XdbThrift_getRealPoints_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class XdbThrift_getRealPoints_pargs {
 public:


  virtual ~XdbThrift_getRealPoints_pargs() noexcept;
  const std::vector<Point> * points;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _XdbThrift_getRealPoints_result__isset {
  _XdbThrift_getRealPoints_result__isset() : success(false) {}
  bool success :1;
} _XdbThrift_getRealPoints_result__isset;

class XdbThrift_getRealPoints_result {
 public:

  XdbThrift_getRealPoints_result(const XdbThrift_getRealPoints_result&);
  XdbThrift_getRealPoints_result& operator=(const XdbThrift_getRealPoints_result&);
  XdbThrift_getRealPoints_result() {
  }

  virtual ~XdbThrift_getRealPoints_result() noexcept;
  std::vector<Point>  success;

  _XdbThrift_getRealPoints_result__isset __isset;

  void __set_success(const std::vector<Point> & val);

  bool operator == (const XdbThrift_getRealPoints_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const XdbThrift_getRealPoints_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const XdbThrift_getRealPoints_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _XdbThrift_getRealPoints_presult__isset {
  _XdbThrift_getRealPoints_presult__isset() : success(false) {}
  bool success :1;
} _XdbThrift_getRealPoints_presult__isset;

class XdbThrift_getRealPoints_presult {
 public:


  virtual ~XdbThrift_getRealPoints_presult() noexcept;
  std::vector<Point> * success;

  _XdbThrift_getRealPoints_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _XdbThrift_getRealPointsWithResulMap_args__isset {
  _XdbThrift_getRealPointsWithResulMap_args__isset() : points(false) {}
  bool points :1;
} _XdbThrift_getRealPointsWithResulMap_args__isset;

class XdbThrift_getRealPointsWithResulMap_args {
 public:

  XdbThrift_getRealPointsWithResulMap_args(const XdbThrift_getRealPointsWithResulMap_args&);
  XdbThrift_getRealPointsWithResulMap_args& operator=(const XdbThrift_getRealPointsWithResulMap_args&);
  XdbThrift_getRealPointsWithResulMap_args() {
  }

  virtual ~XdbThrift_getRealPointsWithResulMap_args() noexcept;
  std::vector<Point>  points;

  _XdbThrift_getRealPointsWithResulMap_args__isset __isset;

  void __set_points(const std::vector<Point> & val);

  bool operator == (const XdbThrift_getRealPointsWithResulMap_args & rhs) const
  {
    if (!(points == rhs.points))
      return false;
    return true;
  }
  bool operator != (const XdbThrift_getRealPointsWithResulMap_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const XdbThrift_getRealPointsWithResulMap_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class XdbThrift_getRealPointsWithResulMap_pargs {
 public:


  virtual ~XdbThrift_getRealPointsWithResulMap_pargs() noexcept;
  const std::vector<Point> * points;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _XdbThrift_getRealPointsWithResulMap_result__isset {
  _XdbThrift_getRealPointsWithResulMap_result__isset() : success(false) {}
  bool success :1;
} _XdbThrift_getRealPointsWithResulMap_result__isset;

class XdbThrift_getRealPointsWithResulMap_result {
 public:

  XdbThrift_getRealPointsWithResulMap_result(const XdbThrift_getRealPointsWithResulMap_result&);
  XdbThrift_getRealPointsWithResulMap_result& operator=(const XdbThrift_getRealPointsWithResulMap_result&);
  XdbThrift_getRealPointsWithResulMap_result() {
  }

  virtual ~XdbThrift_getRealPointsWithResulMap_result() noexcept;
  std::map<std::string, Point>  success;

  _XdbThrift_getRealPointsWithResulMap_result__isset __isset;

  void __set_success(const std::map<std::string, Point> & val);

  bool operator == (const XdbThrift_getRealPointsWithResulMap_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const XdbThrift_getRealPointsWithResulMap_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const XdbThrift_getRealPointsWithResulMap_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _XdbThrift_getRealPointsWithResulMap_presult__isset {
  _XdbThrift_getRealPointsWithResulMap_presult__isset() : success(false) {}
  bool success :1;
} _XdbThrift_getRealPointsWithResulMap_presult__isset;

class XdbThrift_getRealPointsWithResulMap_presult {
 public:


  virtual ~XdbThrift_getRealPointsWithResulMap_presult() noexcept;
  std::map<std::string, Point> * success;

  _XdbThrift_getRealPointsWithResulMap_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _XdbThrift_getHistoryPoints_args__isset {
  _XdbThrift_getHistoryPoints_args__isset() : hq(false) {}
  bool hq :1;
} _XdbThrift_getHistoryPoints_args__isset;

class XdbThrift_getHistoryPoints_args {
 public:

  XdbThrift_getHistoryPoints_args(const XdbThrift_getHistoryPoints_args&);
  XdbThrift_getHistoryPoints_args& operator=(const XdbThrift_getHistoryPoints_args&);
  XdbThrift_getHistoryPoints_args() {
  }

  virtual ~XdbThrift_getHistoryPoints_args() noexcept;
  HisQuery hq;

  _XdbThrift_getHistoryPoints_args__isset __isset;

  void __set_hq(const HisQuery& val);

  bool operator == (const XdbThrift_getHistoryPoints_args & rhs) const
  {
    if (!(hq == rhs.hq))
      return false;
    return true;
  }
  bool operator != (const XdbThrift_getHistoryPoints_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const XdbThrift_getHistoryPoints_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class XdbThrift_getHistoryPoints_pargs {
 public:


  virtual ~XdbThrift_getHistoryPoints_pargs() noexcept;
  const HisQuery* hq;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _XdbThrift_getHistoryPoints_result__isset {
  _XdbThrift_getHistoryPoints_result__isset() : success(false) {}
  bool success :1;
} _XdbThrift_getHistoryPoints_result__isset;

class XdbThrift_getHistoryPoints_result {
 public:

  XdbThrift_getHistoryPoints_result(const XdbThrift_getHistoryPoints_result&);
  XdbThrift_getHistoryPoints_result& operator=(const XdbThrift_getHistoryPoints_result&);
  XdbThrift_getHistoryPoints_result() {
  }

  virtual ~XdbThrift_getHistoryPoints_result() noexcept;
  std::vector<Point>  success;

  _XdbThrift_getHistoryPoints_result__isset __isset;

  void __set_success(const std::vector<Point> & val);

  bool operator == (const XdbThrift_getHistoryPoints_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const XdbThrift_getHistoryPoints_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const XdbThrift_getHistoryPoints_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _XdbThrift_getHistoryPoints_presult__isset {
  _XdbThrift_getHistoryPoints_presult__isset() : success(false) {}
  bool success :1;
} _XdbThrift_getHistoryPoints_presult__isset;

class XdbThrift_getHistoryPoints_presult {
 public:


  virtual ~XdbThrift_getHistoryPoints_presult() noexcept;
  std::vector<Point> * success;

  _XdbThrift_getHistoryPoints_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _XdbThrift_getHistoryPointsByPage_args__isset {
  _XdbThrift_getHistoryPointsByPage_args__isset() : hq(false) {}
  bool hq :1;
} _XdbThrift_getHistoryPointsByPage_args__isset;

class XdbThrift_getHistoryPointsByPage_args {
 public:

  XdbThrift_getHistoryPointsByPage_args(const XdbThrift_getHistoryPointsByPage_args&);
  XdbThrift_getHistoryPointsByPage_args& operator=(const XdbThrift_getHistoryPointsByPage_args&);
  XdbThrift_getHistoryPointsByPage_args() {
  }

  virtual ~XdbThrift_getHistoryPointsByPage_args() noexcept;
  HisQuery hq;

  _XdbThrift_getHistoryPointsByPage_args__isset __isset;

  void __set_hq(const HisQuery& val);

  bool operator == (const XdbThrift_getHistoryPointsByPage_args & rhs) const
  {
    if (!(hq == rhs.hq))
      return false;
    return true;
  }
  bool operator != (const XdbThrift_getHistoryPointsByPage_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const XdbThrift_getHistoryPointsByPage_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class XdbThrift_getHistoryPointsByPage_pargs {
 public:


  virtual ~XdbThrift_getHistoryPointsByPage_pargs() noexcept;
  const HisQuery* hq;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _XdbThrift_getHistoryPointsByPage_result__isset {
  _XdbThrift_getHistoryPointsByPage_result__isset() : success(false) {}
  bool success :1;
} _XdbThrift_getHistoryPointsByPage_result__isset;

class XdbThrift_getHistoryPointsByPage_result {
 public:

  XdbThrift_getHistoryPointsByPage_result(const XdbThrift_getHistoryPointsByPage_result&);
  XdbThrift_getHistoryPointsByPage_result& operator=(const XdbThrift_getHistoryPointsByPage_result&);
  XdbThrift_getHistoryPointsByPage_result() {
  }

  virtual ~XdbThrift_getHistoryPointsByPage_result() noexcept;
  HisQuery success;

  _XdbThrift_getHistoryPointsByPage_result__isset __isset;

  void __set_success(const HisQuery& val);

  bool operator == (const XdbThrift_getHistoryPointsByPage_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const XdbThrift_getHistoryPointsByPage_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const XdbThrift_getHistoryPointsByPage_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _XdbThrift_getHistoryPointsByPage_presult__isset {
  _XdbThrift_getHistoryPointsByPage_presult__isset() : success(false) {}
  bool success :1;
} _XdbThrift_getHistoryPointsByPage_presult__isset;

class XdbThrift_getHistoryPointsByPage_presult {
 public:


  virtual ~XdbThrift_getHistoryPointsByPage_presult() noexcept;
  HisQuery* success;

  _XdbThrift_getHistoryPointsByPage_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _XdbThrift_checkPoint_args__isset {
  _XdbThrift_checkPoint_args__isset() : p(false) {}
  bool p :1;
} _XdbThrift_checkPoint_args__isset;

class XdbThrift_checkPoint_args {
 public:

  XdbThrift_checkPoint_args(const XdbThrift_checkPoint_args&);
  XdbThrift_checkPoint_args& operator=(const XdbThrift_checkPoint_args&);
  XdbThrift_checkPoint_args() {
  }

  virtual ~XdbThrift_checkPoint_args() noexcept;
  Point p;

  _XdbThrift_checkPoint_args__isset __isset;

  void __set_p(const Point& val);

  bool operator == (const XdbThrift_checkPoint_args & rhs) const
  {
    if (!(p == rhs.p))
      return false;
    return true;
  }
  bool operator != (const XdbThrift_checkPoint_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const XdbThrift_checkPoint_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class XdbThrift_checkPoint_pargs {
 public:


  virtual ~XdbThrift_checkPoint_pargs() noexcept;
  const Point* p;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _XdbThrift_checkPoint_result__isset {
  _XdbThrift_checkPoint_result__isset() : success(false) {}
  bool success :1;
} _XdbThrift_checkPoint_result__isset;

class XdbThrift_checkPoint_result {
 public:

  XdbThrift_checkPoint_result(const XdbThrift_checkPoint_result&);
  XdbThrift_checkPoint_result& operator=(const XdbThrift_checkPoint_result&);
  XdbThrift_checkPoint_result() : success(0) {
  }

  virtual ~XdbThrift_checkPoint_result() noexcept;
  bool success;

  _XdbThrift_checkPoint_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const XdbThrift_checkPoint_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const XdbThrift_checkPoint_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const XdbThrift_checkPoint_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _XdbThrift_checkPoint_presult__isset {
  _XdbThrift_checkPoint_presult__isset() : success(false) {}
  bool success :1;
} _XdbThrift_checkPoint_presult__isset;

class XdbThrift_checkPoint_presult {
 public:


  virtual ~XdbThrift_checkPoint_presult() noexcept;
  bool* success;

  _XdbThrift_checkPoint_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _XdbThrift_validatePoint_args__isset {
  _XdbThrift_validatePoint_args__isset() : pd(false) {}
  bool pd :1;
} _XdbThrift_validatePoint_args__isset;

class XdbThrift_validatePoint_args {
 public:

  XdbThrift_validatePoint_args(const XdbThrift_validatePoint_args&);
  XdbThrift_validatePoint_args& operator=(const XdbThrift_validatePoint_args&);
  XdbThrift_validatePoint_args() {
  }

  virtual ~XdbThrift_validatePoint_args() noexcept;
  PointDetail pd;

  _XdbThrift_validatePoint_args__isset __isset;

  void __set_pd(const PointDetail& val);

  bool operator == (const XdbThrift_validatePoint_args & rhs) const
  {
    if (!(pd == rhs.pd))
      return false;
    return true;
  }
  bool operator != (const XdbThrift_validatePoint_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const XdbThrift_validatePoint_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class XdbThrift_validatePoint_pargs {
 public:


  virtual ~XdbThrift_validatePoint_pargs() noexcept;
  const PointDetail* pd;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _XdbThrift_validatePoint_result__isset {
  _XdbThrift_validatePoint_result__isset() : success(false) {}
  bool success :1;
} _XdbThrift_validatePoint_result__isset;

class XdbThrift_validatePoint_result {
 public:

  XdbThrift_validatePoint_result(const XdbThrift_validatePoint_result&);
  XdbThrift_validatePoint_result& operator=(const XdbThrift_validatePoint_result&);
  XdbThrift_validatePoint_result() : success() {
  }

  virtual ~XdbThrift_validatePoint_result() noexcept;
  std::string success;

  _XdbThrift_validatePoint_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const XdbThrift_validatePoint_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const XdbThrift_validatePoint_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const XdbThrift_validatePoint_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _XdbThrift_validatePoint_presult__isset {
  _XdbThrift_validatePoint_presult__isset() : success(false) {}
  bool success :1;
} _XdbThrift_validatePoint_presult__isset;

class XdbThrift_validatePoint_presult {
 public:


  virtual ~XdbThrift_validatePoint_presult() noexcept;
  std::string* success;

  _XdbThrift_validatePoint_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _XdbThrift_createDir_args__isset {
  _XdbThrift_createDir_args__isset() : dirs(false) {}
  bool dirs :1;
} _XdbThrift_createDir_args__isset;

class XdbThrift_createDir_args {
 public:

  XdbThrift_createDir_args(const XdbThrift_createDir_args&);
  XdbThrift_createDir_args& operator=(const XdbThrift_createDir_args&);
  XdbThrift_createDir_args() {
  }

  virtual ~XdbThrift_createDir_args() noexcept;
  std::vector<std::string>  dirs;

  _XdbThrift_createDir_args__isset __isset;

  void __set_dirs(const std::vector<std::string> & val);

  bool operator == (const XdbThrift_createDir_args & rhs) const
  {
    if (!(dirs == rhs.dirs))
      return false;
    return true;
  }
  bool operator != (const XdbThrift_createDir_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const XdbThrift_createDir_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class XdbThrift_createDir_pargs {
 public:


  virtual ~XdbThrift_createDir_pargs() noexcept;
  const std::vector<std::string> * dirs;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _XdbThrift_createDir_result__isset {
  _XdbThrift_createDir_result__isset() : success(false) {}
  bool success :1;
} _XdbThrift_createDir_result__isset;

class XdbThrift_createDir_result {
 public:

  XdbThrift_createDir_result(const XdbThrift_createDir_result&);
  XdbThrift_createDir_result& operator=(const XdbThrift_createDir_result&);
  XdbThrift_createDir_result() : success() {
  }

  virtual ~XdbThrift_createDir_result() noexcept;
  std::string success;

  _XdbThrift_createDir_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const XdbThrift_createDir_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const XdbThrift_createDir_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const XdbThrift_createDir_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _XdbThrift_createDir_presult__isset {
  _XdbThrift_createDir_presult__isset() : success(false) {}
  bool success :1;
} _XdbThrift_createDir_presult__isset;

class XdbThrift_createDir_presult {
 public:


  virtual ~XdbThrift_createDir_presult() noexcept;
  std::string* success;

  _XdbThrift_createDir_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _XdbThrift_deleteDirs_args__isset {
  _XdbThrift_deleteDirs_args__isset() : dirs(false) {}
  bool dirs :1;
} _XdbThrift_deleteDirs_args__isset;

class XdbThrift_deleteDirs_args {
 public:

  XdbThrift_deleteDirs_args(const XdbThrift_deleteDirs_args&);
  XdbThrift_deleteDirs_args& operator=(const XdbThrift_deleteDirs_args&);
  XdbThrift_deleteDirs_args() {
  }

  virtual ~XdbThrift_deleteDirs_args() noexcept;
  std::vector<std::string>  dirs;

  _XdbThrift_deleteDirs_args__isset __isset;

  void __set_dirs(const std::vector<std::string> & val);

  bool operator == (const XdbThrift_deleteDirs_args & rhs) const
  {
    if (!(dirs == rhs.dirs))
      return false;
    return true;
  }
  bool operator != (const XdbThrift_deleteDirs_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const XdbThrift_deleteDirs_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class XdbThrift_deleteDirs_pargs {
 public:


  virtual ~XdbThrift_deleteDirs_pargs() noexcept;
  const std::vector<std::string> * dirs;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _XdbThrift_deleteDirs_result__isset {
  _XdbThrift_deleteDirs_result__isset() : success(false) {}
  bool success :1;
} _XdbThrift_deleteDirs_result__isset;

class XdbThrift_deleteDirs_result {
 public:

  XdbThrift_deleteDirs_result(const XdbThrift_deleteDirs_result&);
  XdbThrift_deleteDirs_result& operator=(const XdbThrift_deleteDirs_result&);
  XdbThrift_deleteDirs_result() : success() {
  }

  virtual ~XdbThrift_deleteDirs_result() noexcept;
  std::string success;

  _XdbThrift_deleteDirs_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const XdbThrift_deleteDirs_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const XdbThrift_deleteDirs_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const XdbThrift_deleteDirs_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _XdbThrift_deleteDirs_presult__isset {
  _XdbThrift_deleteDirs_presult__isset() : success(false) {}
  bool success :1;
} _XdbThrift_deleteDirs_presult__isset;

class XdbThrift_deleteDirs_presult {
 public:


  virtual ~XdbThrift_deleteDirs_presult() noexcept;
  std::string* success;

  _XdbThrift_deleteDirs_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class XdbThrift_getDirs_args {
 public:

  XdbThrift_getDirs_args(const XdbThrift_getDirs_args&);
  XdbThrift_getDirs_args& operator=(const XdbThrift_getDirs_args&);
  XdbThrift_getDirs_args() {
  }

  virtual ~XdbThrift_getDirs_args() noexcept;

  bool operator == (const XdbThrift_getDirs_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const XdbThrift_getDirs_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const XdbThrift_getDirs_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class XdbThrift_getDirs_pargs {
 public:


  virtual ~XdbThrift_getDirs_pargs() noexcept;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _XdbThrift_getDirs_result__isset {
  _XdbThrift_getDirs_result__isset() : success(false) {}
  bool success :1;
} _XdbThrift_getDirs_result__isset;

class XdbThrift_getDirs_result {
 public:

  XdbThrift_getDirs_result(const XdbThrift_getDirs_result&);
  XdbThrift_getDirs_result& operator=(const XdbThrift_getDirs_result&);
  XdbThrift_getDirs_result() {
  }

  virtual ~XdbThrift_getDirs_result() noexcept;
  std::vector<std::string>  success;

  _XdbThrift_getDirs_result__isset __isset;

  void __set_success(const std::vector<std::string> & val);

  bool operator == (const XdbThrift_getDirs_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const XdbThrift_getDirs_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const XdbThrift_getDirs_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _XdbThrift_getDirs_presult__isset {
  _XdbThrift_getDirs_presult__isset() : success(false) {}
  bool success :1;
} _XdbThrift_getDirs_presult__isset;

class XdbThrift_getDirs_presult {
 public:


  virtual ~XdbThrift_getDirs_presult() noexcept;
  std::vector<std::string> * success;

  _XdbThrift_getDirs_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _XdbThrift_getPoints_args__isset {
  _XdbThrift_getPoints_args__isset() : pq(false) {}
  bool pq :1;
} _XdbThrift_getPoints_args__isset;

class XdbThrift_getPoints_args {
 public:

  XdbThrift_getPoints_args(const XdbThrift_getPoints_args&);
  XdbThrift_getPoints_args& operator=(const XdbThrift_getPoints_args&);
  XdbThrift_getPoints_args() {
  }

  virtual ~XdbThrift_getPoints_args() noexcept;
  DetailQuery pq;

  _XdbThrift_getPoints_args__isset __isset;

  void __set_pq(const DetailQuery& val);

  bool operator == (const XdbThrift_getPoints_args & rhs) const
  {
    if (!(pq == rhs.pq))
      return false;
    return true;
  }
  bool operator != (const XdbThrift_getPoints_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const XdbThrift_getPoints_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class XdbThrift_getPoints_pargs {
 public:


  virtual ~XdbThrift_getPoints_pargs() noexcept;
  const DetailQuery* pq;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _XdbThrift_getPoints_result__isset {
  _XdbThrift_getPoints_result__isset() : success(false) {}
  bool success :1;
} _XdbThrift_getPoints_result__isset;

class XdbThrift_getPoints_result {
 public:

  XdbThrift_getPoints_result(const XdbThrift_getPoints_result&);
  XdbThrift_getPoints_result& operator=(const XdbThrift_getPoints_result&);
  XdbThrift_getPoints_result() {
  }

  virtual ~XdbThrift_getPoints_result() noexcept;
  DetailQuery success;

  _XdbThrift_getPoints_result__isset __isset;

  void __set_success(const DetailQuery& val);

  bool operator == (const XdbThrift_getPoints_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const XdbThrift_getPoints_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const XdbThrift_getPoints_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _XdbThrift_getPoints_presult__isset {
  _XdbThrift_getPoints_presult__isset() : success(false) {}
  bool success :1;
} _XdbThrift_getPoints_presult__isset;

class XdbThrift_getPoints_presult {
 public:


  virtual ~XdbThrift_getPoints_presult() noexcept;
  DetailQuery* success;

  _XdbThrift_getPoints_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _XdbThrift_getCountByDir_args__isset {
  _XdbThrift_getCountByDir_args__isset() : dirs(false) {}
  bool dirs :1;
} _XdbThrift_getCountByDir_args__isset;

class XdbThrift_getCountByDir_args {
 public:

  XdbThrift_getCountByDir_args(const XdbThrift_getCountByDir_args&);
  XdbThrift_getCountByDir_args& operator=(const XdbThrift_getCountByDir_args&);
  XdbThrift_getCountByDir_args() {
  }

  virtual ~XdbThrift_getCountByDir_args() noexcept;
  std::vector<std::string>  dirs;

  _XdbThrift_getCountByDir_args__isset __isset;

  void __set_dirs(const std::vector<std::string> & val);

  bool operator == (const XdbThrift_getCountByDir_args & rhs) const
  {
    if (!(dirs == rhs.dirs))
      return false;
    return true;
  }
  bool operator != (const XdbThrift_getCountByDir_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const XdbThrift_getCountByDir_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class XdbThrift_getCountByDir_pargs {
 public:


  virtual ~XdbThrift_getCountByDir_pargs() noexcept;
  const std::vector<std::string> * dirs;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _XdbThrift_getCountByDir_result__isset {
  _XdbThrift_getCountByDir_result__isset() : success(false) {}
  bool success :1;
} _XdbThrift_getCountByDir_result__isset;

class XdbThrift_getCountByDir_result {
 public:

  XdbThrift_getCountByDir_result(const XdbThrift_getCountByDir_result&);
  XdbThrift_getCountByDir_result& operator=(const XdbThrift_getCountByDir_result&);
  XdbThrift_getCountByDir_result() {
  }

  virtual ~XdbThrift_getCountByDir_result() noexcept;
  std::map<std::string, int64_t>  success;

  _XdbThrift_getCountByDir_result__isset __isset;

  void __set_success(const std::map<std::string, int64_t> & val);

  bool operator == (const XdbThrift_getCountByDir_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const XdbThrift_getCountByDir_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const XdbThrift_getCountByDir_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _XdbThrift_getCountByDir_presult__isset {
  _XdbThrift_getCountByDir_presult__isset() : success(false) {}
  bool success :1;
} _XdbThrift_getCountByDir_presult__isset;

class XdbThrift_getCountByDir_presult {
 public:


  virtual ~XdbThrift_getCountByDir_presult() noexcept;
  std::map<std::string, int64_t> * success;

  _XdbThrift_getCountByDir_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _XdbThrift_getPointsByFullName_args__isset {
  _XdbThrift_getPointsByFullName_args__isset() : fullNames(false), needRealData(false) {}
  bool fullNames :1;
  bool needRealData :1;
} _XdbThrift_getPointsByFullName_args__isset;

class XdbThrift_getPointsByFullName_args {
 public:

  XdbThrift_getPointsByFullName_args(const XdbThrift_getPointsByFullName_args&);
  XdbThrift_getPointsByFullName_args& operator=(const XdbThrift_getPointsByFullName_args&);
  XdbThrift_getPointsByFullName_args() : needRealData(0) {
  }

  virtual ~XdbThrift_getPointsByFullName_args() noexcept;
  std::vector<std::string>  fullNames;
  bool needRealData;

  _XdbThrift_getPointsByFullName_args__isset __isset;

  void __set_fullNames(const std::vector<std::string> & val);

  void __set_needRealData(const bool val);

  bool operator == (const XdbThrift_getPointsByFullName_args & rhs) const
  {
    if (!(fullNames == rhs.fullNames))
      return false;
    if (!(needRealData == rhs.needRealData))
      return false;
    return true;
  }
  bool operator != (const XdbThrift_getPointsByFullName_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const XdbThrift_getPointsByFullName_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class XdbThrift_getPointsByFullName_pargs {
 public:


  virtual ~XdbThrift_getPointsByFullName_pargs() noexcept;
  const std::vector<std::string> * fullNames;
  const bool* needRealData;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _XdbThrift_getPointsByFullName_result__isset {
  _XdbThrift_getPointsByFullName_result__isset() : success(false) {}
  bool success :1;
} _XdbThrift_getPointsByFullName_result__isset;

class XdbThrift_getPointsByFullName_result {
 public:

  XdbThrift_getPointsByFullName_result(const XdbThrift_getPointsByFullName_result&);
  XdbThrift_getPointsByFullName_result& operator=(const XdbThrift_getPointsByFullName_result&);
  XdbThrift_getPointsByFullName_result() {
  }

  virtual ~XdbThrift_getPointsByFullName_result() noexcept;
  std::vector<PointDetail>  success;

  _XdbThrift_getPointsByFullName_result__isset __isset;

  void __set_success(const std::vector<PointDetail> & val);

  bool operator == (const XdbThrift_getPointsByFullName_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const XdbThrift_getPointsByFullName_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const XdbThrift_getPointsByFullName_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _XdbThrift_getPointsByFullName_presult__isset {
  _XdbThrift_getPointsByFullName_presult__isset() : success(false) {}
  bool success :1;
} _XdbThrift_getPointsByFullName_presult__isset;

class XdbThrift_getPointsByFullName_presult {
 public:


  virtual ~XdbThrift_getPointsByFullName_presult() noexcept;
  std::vector<PointDetail> * success;

  _XdbThrift_getPointsByFullName_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _XdbThrift_getHistoryPointsByIndividual_args__isset {
  _XdbThrift_getHistoryPointsByIndividual_args__isset() : hq(false) {}
  bool hq :1;
} _XdbThrift_getHistoryPointsByIndividual_args__isset;

class XdbThrift_getHistoryPointsByIndividual_args {
 public:

  XdbThrift_getHistoryPointsByIndividual_args(const XdbThrift_getHistoryPointsByIndividual_args&);
  XdbThrift_getHistoryPointsByIndividual_args& operator=(const XdbThrift_getHistoryPointsByIndividual_args&);
  XdbThrift_getHistoryPointsByIndividual_args() {
  }

  virtual ~XdbThrift_getHistoryPointsByIndividual_args() noexcept;
  std::vector<HisQuery>  hq;

  _XdbThrift_getHistoryPointsByIndividual_args__isset __isset;

  void __set_hq(const std::vector<HisQuery> & val);

  bool operator == (const XdbThrift_getHistoryPointsByIndividual_args & rhs) const
  {
    if (!(hq == rhs.hq))
      return false;
    return true;
  }
  bool operator != (const XdbThrift_getHistoryPointsByIndividual_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const XdbThrift_getHistoryPointsByIndividual_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class XdbThrift_getHistoryPointsByIndividual_pargs {
 public:


  virtual ~XdbThrift_getHistoryPointsByIndividual_pargs() noexcept;
  const std::vector<HisQuery> * hq;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _XdbThrift_getHistoryPointsByIndividual_result__isset {
  _XdbThrift_getHistoryPointsByIndividual_result__isset() : success(false) {}
  bool success :1;
} _XdbThrift_getHistoryPointsByIndividual_result__isset;

class XdbThrift_getHistoryPointsByIndividual_result {
 public:

  XdbThrift_getHistoryPointsByIndividual_result(const XdbThrift_getHistoryPointsByIndividual_result&);
  XdbThrift_getHistoryPointsByIndividual_result& operator=(const XdbThrift_getHistoryPointsByIndividual_result&);
  XdbThrift_getHistoryPointsByIndividual_result() {
  }

  virtual ~XdbThrift_getHistoryPointsByIndividual_result() noexcept;
  std::vector<HisQuery>  success;

  _XdbThrift_getHistoryPointsByIndividual_result__isset __isset;

  void __set_success(const std::vector<HisQuery> & val);

  bool operator == (const XdbThrift_getHistoryPointsByIndividual_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const XdbThrift_getHistoryPointsByIndividual_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const XdbThrift_getHistoryPointsByIndividual_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _XdbThrift_getHistoryPointsByIndividual_presult__isset {
  _XdbThrift_getHistoryPointsByIndividual_presult__isset() : success(false) {}
  bool success :1;
} _XdbThrift_getHistoryPointsByIndividual_presult__isset;

class XdbThrift_getHistoryPointsByIndividual_presult {
 public:


  virtual ~XdbThrift_getHistoryPointsByIndividual_presult() noexcept;
  std::vector<HisQuery> * success;

  _XdbThrift_getHistoryPointsByIndividual_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _XdbThrift_importHistoryPoints_args__isset {
  _XdbThrift_importHistoryPoints_args__isset() : points(false) {}
  bool points :1;
} _XdbThrift_importHistoryPoints_args__isset;

class XdbThrift_importHistoryPoints_args {
 public:

  XdbThrift_importHistoryPoints_args(const XdbThrift_importHistoryPoints_args&);
  XdbThrift_importHistoryPoints_args& operator=(const XdbThrift_importHistoryPoints_args&);
  XdbThrift_importHistoryPoints_args() {
  }

  virtual ~XdbThrift_importHistoryPoints_args() noexcept;
  std::vector<Point>  points;

  _XdbThrift_importHistoryPoints_args__isset __isset;

  void __set_points(const std::vector<Point> & val);

  bool operator == (const XdbThrift_importHistoryPoints_args & rhs) const
  {
    if (!(points == rhs.points))
      return false;
    return true;
  }
  bool operator != (const XdbThrift_importHistoryPoints_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const XdbThrift_importHistoryPoints_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class XdbThrift_importHistoryPoints_pargs {
 public:


  virtual ~XdbThrift_importHistoryPoints_pargs() noexcept;
  const std::vector<Point> * points;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _XdbThrift_importHistoryPoints_result__isset {
  _XdbThrift_importHistoryPoints_result__isset() : success(false) {}
  bool success :1;
} _XdbThrift_importHistoryPoints_result__isset;

class XdbThrift_importHistoryPoints_result {
 public:

  XdbThrift_importHistoryPoints_result(const XdbThrift_importHistoryPoints_result&);
  XdbThrift_importHistoryPoints_result& operator=(const XdbThrift_importHistoryPoints_result&);
  XdbThrift_importHistoryPoints_result() : success() {
  }

  virtual ~XdbThrift_importHistoryPoints_result() noexcept;
  std::string success;

  _XdbThrift_importHistoryPoints_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const XdbThrift_importHistoryPoints_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const XdbThrift_importHistoryPoints_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const XdbThrift_importHistoryPoints_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _XdbThrift_importHistoryPoints_presult__isset {
  _XdbThrift_importHistoryPoints_presult__isset() : success(false) {}
  bool success :1;
} _XdbThrift_importHistoryPoints_presult__isset;

class XdbThrift_importHistoryPoints_presult {
 public:


  virtual ~XdbThrift_importHistoryPoints_presult() noexcept;
  std::string* success;

  _XdbThrift_importHistoryPoints_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _XdbThrift_deleteHistoryPoints_args__isset {
  _XdbThrift_deleteHistoryPoints_args__isset() : hqs(false) {}
  bool hqs :1;
} _XdbThrift_deleteHistoryPoints_args__isset;

class XdbThrift_deleteHistoryPoints_args {
 public:

  XdbThrift_deleteHistoryPoints_args(const XdbThrift_deleteHistoryPoints_args&);
  XdbThrift_deleteHistoryPoints_args& operator=(const XdbThrift_deleteHistoryPoints_args&);
  XdbThrift_deleteHistoryPoints_args() {
  }

  virtual ~XdbThrift_deleteHistoryPoints_args() noexcept;
  std::vector<HisQuery>  hqs;

  _XdbThrift_deleteHistoryPoints_args__isset __isset;

  void __set_hqs(const std::vector<HisQuery> & val);

  bool operator == (const XdbThrift_deleteHistoryPoints_args & rhs) const
  {
    if (!(hqs == rhs.hqs))
      return false;
    return true;
  }
  bool operator != (const XdbThrift_deleteHistoryPoints_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const XdbThrift_deleteHistoryPoints_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class XdbThrift_deleteHistoryPoints_pargs {
 public:


  virtual ~XdbThrift_deleteHistoryPoints_pargs() noexcept;
  const std::vector<HisQuery> * hqs;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class XdbThrift_deleteHistoryPoints_result {
 public:

  XdbThrift_deleteHistoryPoints_result(const XdbThrift_deleteHistoryPoints_result&);
  XdbThrift_deleteHistoryPoints_result& operator=(const XdbThrift_deleteHistoryPoints_result&);
  XdbThrift_deleteHistoryPoints_result() {
  }

  virtual ~XdbThrift_deleteHistoryPoints_result() noexcept;

  bool operator == (const XdbThrift_deleteHistoryPoints_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const XdbThrift_deleteHistoryPoints_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const XdbThrift_deleteHistoryPoints_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class XdbThrift_deleteHistoryPoints_presult {
 public:


  virtual ~XdbThrift_deleteHistoryPoints_presult() noexcept;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _XdbThrift_getPointsByName_args__isset {
  _XdbThrift_getPointsByName_args__isset() : points(false) {}
  bool points :1;
} _XdbThrift_getPointsByName_args__isset;

class XdbThrift_getPointsByName_args {
 public:

  XdbThrift_getPointsByName_args(const XdbThrift_getPointsByName_args&);
  XdbThrift_getPointsByName_args& operator=(const XdbThrift_getPointsByName_args&);
  XdbThrift_getPointsByName_args() {
  }

  virtual ~XdbThrift_getPointsByName_args() noexcept;
  std::vector<PointDetail>  points;

  _XdbThrift_getPointsByName_args__isset __isset;

  void __set_points(const std::vector<PointDetail> & val);

  bool operator == (const XdbThrift_getPointsByName_args & rhs) const
  {
    if (!(points == rhs.points))
      return false;
    return true;
  }
  bool operator != (const XdbThrift_getPointsByName_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const XdbThrift_getPointsByName_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class XdbThrift_getPointsByName_pargs {
 public:


  virtual ~XdbThrift_getPointsByName_pargs() noexcept;
  const std::vector<PointDetail> * points;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _XdbThrift_getPointsByName_result__isset {
  _XdbThrift_getPointsByName_result__isset() : success(false) {}
  bool success :1;
} _XdbThrift_getPointsByName_result__isset;

class XdbThrift_getPointsByName_result {
 public:

  XdbThrift_getPointsByName_result(const XdbThrift_getPointsByName_result&);
  XdbThrift_getPointsByName_result& operator=(const XdbThrift_getPointsByName_result&);
  XdbThrift_getPointsByName_result() {
  }

  virtual ~XdbThrift_getPointsByName_result() noexcept;
  std::vector<PointDetail>  success;

  _XdbThrift_getPointsByName_result__isset __isset;

  void __set_success(const std::vector<PointDetail> & val);

  bool operator == (const XdbThrift_getPointsByName_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const XdbThrift_getPointsByName_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const XdbThrift_getPointsByName_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _XdbThrift_getPointsByName_presult__isset {
  _XdbThrift_getPointsByName_presult__isset() : success(false) {}
  bool success :1;
} _XdbThrift_getPointsByName_presult__isset;

class XdbThrift_getPointsByName_presult {
 public:


  virtual ~XdbThrift_getPointsByName_presult() noexcept;
  std::vector<PointDetail> * success;

  _XdbThrift_getPointsByName_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _XdbThrift_getPointsByExName_args__isset {
  _XdbThrift_getPointsByExName_args__isset() : points(false) {}
  bool points :1;
} _XdbThrift_getPointsByExName_args__isset;

class XdbThrift_getPointsByExName_args {
 public:

  XdbThrift_getPointsByExName_args(const XdbThrift_getPointsByExName_args&);
  XdbThrift_getPointsByExName_args& operator=(const XdbThrift_getPointsByExName_args&);
  XdbThrift_getPointsByExName_args() {
  }

  virtual ~XdbThrift_getPointsByExName_args() noexcept;
  std::vector<PointDetail>  points;

  _XdbThrift_getPointsByExName_args__isset __isset;

  void __set_points(const std::vector<PointDetail> & val);

  bool operator == (const XdbThrift_getPointsByExName_args & rhs) const
  {
    if (!(points == rhs.points))
      return false;
    return true;
  }
  bool operator != (const XdbThrift_getPointsByExName_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const XdbThrift_getPointsByExName_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class XdbThrift_getPointsByExName_pargs {
 public:


  virtual ~XdbThrift_getPointsByExName_pargs() noexcept;
  const std::vector<PointDetail> * points;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _XdbThrift_getPointsByExName_result__isset {
  _XdbThrift_getPointsByExName_result__isset() : success(false) {}
  bool success :1;
} _XdbThrift_getPointsByExName_result__isset;

class XdbThrift_getPointsByExName_result {
 public:

  XdbThrift_getPointsByExName_result(const XdbThrift_getPointsByExName_result&);
  XdbThrift_getPointsByExName_result& operator=(const XdbThrift_getPointsByExName_result&);
  XdbThrift_getPointsByExName_result() {
  }

  virtual ~XdbThrift_getPointsByExName_result() noexcept;
  std::vector<PointDetail>  success;

  _XdbThrift_getPointsByExName_result__isset __isset;

  void __set_success(const std::vector<PointDetail> & val);

  bool operator == (const XdbThrift_getPointsByExName_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const XdbThrift_getPointsByExName_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const XdbThrift_getPointsByExName_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _XdbThrift_getPointsByExName_presult__isset {
  _XdbThrift_getPointsByExName_presult__isset() : success(false) {}
  bool success :1;
} _XdbThrift_getPointsByExName_presult__isset;

class XdbThrift_getPointsByExName_presult {
 public:


  virtual ~XdbThrift_getPointsByExName_presult() noexcept;
  std::vector<PointDetail> * success;

  _XdbThrift_getPointsByExName_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _XdbThrift_putRealPointsByExName_args__isset {
  _XdbThrift_putRealPointsByExName_args__isset() : points(false) {}
  bool points :1;
} _XdbThrift_putRealPointsByExName_args__isset;

class XdbThrift_putRealPointsByExName_args {
 public:

  XdbThrift_putRealPointsByExName_args(const XdbThrift_putRealPointsByExName_args&);
  XdbThrift_putRealPointsByExName_args& operator=(const XdbThrift_putRealPointsByExName_args&);
  XdbThrift_putRealPointsByExName_args() {
  }

  virtual ~XdbThrift_putRealPointsByExName_args() noexcept;
  std::vector<Point>  points;

  _XdbThrift_putRealPointsByExName_args__isset __isset;

  void __set_points(const std::vector<Point> & val);

  bool operator == (const XdbThrift_putRealPointsByExName_args & rhs) const
  {
    if (!(points == rhs.points))
      return false;
    return true;
  }
  bool operator != (const XdbThrift_putRealPointsByExName_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const XdbThrift_putRealPointsByExName_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class XdbThrift_putRealPointsByExName_pargs {
 public:


  virtual ~XdbThrift_putRealPointsByExName_pargs() noexcept;
  const std::vector<Point> * points;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _XdbThrift_putRealPointsByExName_result__isset {
  _XdbThrift_putRealPointsByExName_result__isset() : success(false) {}
  bool success :1;
} _XdbThrift_putRealPointsByExName_result__isset;

class XdbThrift_putRealPointsByExName_result {
 public:

  XdbThrift_putRealPointsByExName_result(const XdbThrift_putRealPointsByExName_result&);
  XdbThrift_putRealPointsByExName_result& operator=(const XdbThrift_putRealPointsByExName_result&);
  XdbThrift_putRealPointsByExName_result() : success() {
  }

  virtual ~XdbThrift_putRealPointsByExName_result() noexcept;
  std::string success;

  _XdbThrift_putRealPointsByExName_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const XdbThrift_putRealPointsByExName_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const XdbThrift_putRealPointsByExName_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const XdbThrift_putRealPointsByExName_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _XdbThrift_putRealPointsByExName_presult__isset {
  _XdbThrift_putRealPointsByExName_presult__isset() : success(false) {}
  bool success :1;
} _XdbThrift_putRealPointsByExName_presult__isset;

class XdbThrift_putRealPointsByExName_presult {
 public:


  virtual ~XdbThrift_putRealPointsByExName_presult() noexcept;
  std::string* success;

  _XdbThrift_putRealPointsByExName_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _XdbThrift_getRealPointsByExName_args__isset {
  _XdbThrift_getRealPointsByExName_args__isset() : points(false) {}
  bool points :1;
} _XdbThrift_getRealPointsByExName_args__isset;

class XdbThrift_getRealPointsByExName_args {
 public:

  XdbThrift_getRealPointsByExName_args(const XdbThrift_getRealPointsByExName_args&);
  XdbThrift_getRealPointsByExName_args& operator=(const XdbThrift_getRealPointsByExName_args&);
  XdbThrift_getRealPointsByExName_args() {
  }

  virtual ~XdbThrift_getRealPointsByExName_args() noexcept;
  std::vector<Point>  points;

  _XdbThrift_getRealPointsByExName_args__isset __isset;

  void __set_points(const std::vector<Point> & val);

  bool operator == (const XdbThrift_getRealPointsByExName_args & rhs) const
  {
    if (!(points == rhs.points))
      return false;
    return true;
  }
  bool operator != (const XdbThrift_getRealPointsByExName_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const XdbThrift_getRealPointsByExName_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class XdbThrift_getRealPointsByExName_pargs {
 public:


  virtual ~XdbThrift_getRealPointsByExName_pargs() noexcept;
  const std::vector<Point> * points;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _XdbThrift_getRealPointsByExName_result__isset {
  _XdbThrift_getRealPointsByExName_result__isset() : success(false) {}
  bool success :1;
} _XdbThrift_getRealPointsByExName_result__isset;

class XdbThrift_getRealPointsByExName_result {
 public:

  XdbThrift_getRealPointsByExName_result(const XdbThrift_getRealPointsByExName_result&);
  XdbThrift_getRealPointsByExName_result& operator=(const XdbThrift_getRealPointsByExName_result&);
  XdbThrift_getRealPointsByExName_result() {
  }

  virtual ~XdbThrift_getRealPointsByExName_result() noexcept;
  std::vector<Point>  success;

  _XdbThrift_getRealPointsByExName_result__isset __isset;

  void __set_success(const std::vector<Point> & val);

  bool operator == (const XdbThrift_getRealPointsByExName_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const XdbThrift_getRealPointsByExName_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const XdbThrift_getRealPointsByExName_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _XdbThrift_getRealPointsByExName_presult__isset {
  _XdbThrift_getRealPointsByExName_presult__isset() : success(false) {}
  bool success :1;
} _XdbThrift_getRealPointsByExName_presult__isset;

class XdbThrift_getRealPointsByExName_presult {
 public:


  virtual ~XdbThrift_getRealPointsByExName_presult() noexcept;
  std::vector<Point> * success;

  _XdbThrift_getRealPointsByExName_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _XdbThrift_getHistoryPointsByExName_args__isset {
  _XdbThrift_getHistoryPointsByExName_args__isset() : hq(false) {}
  bool hq :1;
} _XdbThrift_getHistoryPointsByExName_args__isset;

class XdbThrift_getHistoryPointsByExName_args {
 public:

  XdbThrift_getHistoryPointsByExName_args(const XdbThrift_getHistoryPointsByExName_args&);
  XdbThrift_getHistoryPointsByExName_args& operator=(const XdbThrift_getHistoryPointsByExName_args&);
  XdbThrift_getHistoryPointsByExName_args() {
  }

  virtual ~XdbThrift_getHistoryPointsByExName_args() noexcept;
  HisQuery hq;

  _XdbThrift_getHistoryPointsByExName_args__isset __isset;

  void __set_hq(const HisQuery& val);

  bool operator == (const XdbThrift_getHistoryPointsByExName_args & rhs) const
  {
    if (!(hq == rhs.hq))
      return false;
    return true;
  }
  bool operator != (const XdbThrift_getHistoryPointsByExName_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const XdbThrift_getHistoryPointsByExName_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class XdbThrift_getHistoryPointsByExName_pargs {
 public:


  virtual ~XdbThrift_getHistoryPointsByExName_pargs() noexcept;
  const HisQuery* hq;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _XdbThrift_getHistoryPointsByExName_result__isset {
  _XdbThrift_getHistoryPointsByExName_result__isset() : success(false) {}
  bool success :1;
} _XdbThrift_getHistoryPointsByExName_result__isset;

class XdbThrift_getHistoryPointsByExName_result {
 public:

  XdbThrift_getHistoryPointsByExName_result(const XdbThrift_getHistoryPointsByExName_result&);
  XdbThrift_getHistoryPointsByExName_result& operator=(const XdbThrift_getHistoryPointsByExName_result&);
  XdbThrift_getHistoryPointsByExName_result() {
  }

  virtual ~XdbThrift_getHistoryPointsByExName_result() noexcept;
  std::vector<Point>  success;

  _XdbThrift_getHistoryPointsByExName_result__isset __isset;

  void __set_success(const std::vector<Point> & val);

  bool operator == (const XdbThrift_getHistoryPointsByExName_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const XdbThrift_getHistoryPointsByExName_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const XdbThrift_getHistoryPointsByExName_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _XdbThrift_getHistoryPointsByExName_presult__isset {
  _XdbThrift_getHistoryPointsByExName_presult__isset() : success(false) {}
  bool success :1;
} _XdbThrift_getHistoryPointsByExName_presult__isset;

class XdbThrift_getHistoryPointsByExName_presult {
 public:


  virtual ~XdbThrift_getHistoryPointsByExName_presult() noexcept;
  std::vector<Point> * success;

  _XdbThrift_getHistoryPointsByExName_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _XdbThrift_test_args__isset {
  _XdbThrift_test_args__isset() : test(false) {}
  bool test :1;
} _XdbThrift_test_args__isset;

class XdbThrift_test_args {
 public:

  XdbThrift_test_args(const XdbThrift_test_args&);
  XdbThrift_test_args& operator=(const XdbThrift_test_args&);
  XdbThrift_test_args() : test() {
  }

  virtual ~XdbThrift_test_args() noexcept;
  std::string test;

  _XdbThrift_test_args__isset __isset;

  void __set_test(const std::string& val);

  bool operator == (const XdbThrift_test_args & rhs) const
  {
    if (!(test == rhs.test))
      return false;
    return true;
  }
  bool operator != (const XdbThrift_test_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const XdbThrift_test_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class XdbThrift_test_pargs {
 public:


  virtual ~XdbThrift_test_pargs() noexcept;
  const std::string* test;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _XdbThrift_test_result__isset {
  _XdbThrift_test_result__isset() : success(false) {}
  bool success :1;
} _XdbThrift_test_result__isset;

class XdbThrift_test_result {
 public:

  XdbThrift_test_result(const XdbThrift_test_result&);
  XdbThrift_test_result& operator=(const XdbThrift_test_result&);
  XdbThrift_test_result() : success() {
  }

  virtual ~XdbThrift_test_result() noexcept;
  std::string success;

  _XdbThrift_test_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const XdbThrift_test_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const XdbThrift_test_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const XdbThrift_test_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _XdbThrift_test_presult__isset {
  _XdbThrift_test_presult__isset() : success(false) {}
  bool success :1;
} _XdbThrift_test_presult__isset;

class XdbThrift_test_presult {
 public:


  virtual ~XdbThrift_test_presult() noexcept;
  std::string* success;

  _XdbThrift_test_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class XdbThrift_getCurServerTime_args {
 public:

  XdbThrift_getCurServerTime_args(const XdbThrift_getCurServerTime_args&);
  XdbThrift_getCurServerTime_args& operator=(const XdbThrift_getCurServerTime_args&);
  XdbThrift_getCurServerTime_args() {
  }

  virtual ~XdbThrift_getCurServerTime_args() noexcept;

  bool operator == (const XdbThrift_getCurServerTime_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const XdbThrift_getCurServerTime_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const XdbThrift_getCurServerTime_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class XdbThrift_getCurServerTime_pargs {
 public:


  virtual ~XdbThrift_getCurServerTime_pargs() noexcept;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _XdbThrift_getCurServerTime_result__isset {
  _XdbThrift_getCurServerTime_result__isset() : success(false) {}
  bool success :1;
} _XdbThrift_getCurServerTime_result__isset;

class XdbThrift_getCurServerTime_result {
 public:

  XdbThrift_getCurServerTime_result(const XdbThrift_getCurServerTime_result&);
  XdbThrift_getCurServerTime_result& operator=(const XdbThrift_getCurServerTime_result&);
  XdbThrift_getCurServerTime_result() : success(0) {
  }

  virtual ~XdbThrift_getCurServerTime_result() noexcept;
  int64_t success;

  _XdbThrift_getCurServerTime_result__isset __isset;

  void __set_success(const int64_t val);

  bool operator == (const XdbThrift_getCurServerTime_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const XdbThrift_getCurServerTime_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const XdbThrift_getCurServerTime_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _XdbThrift_getCurServerTime_presult__isset {
  _XdbThrift_getCurServerTime_presult__isset() : success(false) {}
  bool success :1;
} _XdbThrift_getCurServerTime_presult__isset;

class XdbThrift_getCurServerTime_presult {
 public:


  virtual ~XdbThrift_getCurServerTime_presult() noexcept;
  int64_t* success;

  _XdbThrift_getCurServerTime_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class XdbThriftClient : virtual public XdbThriftIf {
 public:
  XdbThriftClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  XdbThriftClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void putPoints(std::string& _return, const std::vector<PointDetail> & points);
  void send_putPoints(const std::vector<PointDetail> & points);
  void recv_putPoints(std::string& _return);
  void deletePoints(std::string& _return, const std::vector<PointDetail> & points, const bool delReal);
  void send_deletePoints(const std::vector<PointDetail> & points, const bool delReal);
  void recv_deletePoints(std::string& _return);
  void putRealPoints(std::string& _return, const std::vector<Point> & points);
  void send_putRealPoints(const std::vector<Point> & points);
  void recv_putRealPoints(std::string& _return);
  void _putPoints(const std::vector<PointDetail> & points);
  void send__putPoints(const std::vector<PointDetail> & points);
  void recv__putPoints();
  void _deletePoints(const std::vector<PointDetail> & points, const bool delReal);
  void send__deletePoints(const std::vector<PointDetail> & points, const bool delReal);
  void recv__deletePoints();
  void _putRealPoints(const std::vector<Point> & points);
  void send__putRealPoints(const std::vector<Point> & points);
  void recv__putRealPoints();
  void getRealPoints(std::vector<Point> & _return, const std::vector<Point> & points);
  void send_getRealPoints(const std::vector<Point> & points);
  void recv_getRealPoints(std::vector<Point> & _return);
  void getRealPointsWithResulMap(std::map<std::string, Point> & _return, const std::vector<Point> & points);
  void send_getRealPointsWithResulMap(const std::vector<Point> & points);
  void recv_getRealPointsWithResulMap(std::map<std::string, Point> & _return);
  void getHistoryPoints(std::vector<Point> & _return, const HisQuery& hq);
  void send_getHistoryPoints(const HisQuery& hq);
  void recv_getHistoryPoints(std::vector<Point> & _return);
  void getHistoryPointsByPage(HisQuery& _return, const HisQuery& hq);
  void send_getHistoryPointsByPage(const HisQuery& hq);
  void recv_getHistoryPointsByPage(HisQuery& _return);
  bool checkPoint(const Point& p);
  void send_checkPoint(const Point& p);
  bool recv_checkPoint();
  void validatePoint(std::string& _return, const PointDetail& pd);
  void send_validatePoint(const PointDetail& pd);
  void recv_validatePoint(std::string& _return);
  void createDir(std::string& _return, const std::vector<std::string> & dirs);
  void send_createDir(const std::vector<std::string> & dirs);
  void recv_createDir(std::string& _return);
  void deleteDirs(std::string& _return, const std::vector<std::string> & dirs);
  void send_deleteDirs(const std::vector<std::string> & dirs);
  void recv_deleteDirs(std::string& _return);
  void getDirs(std::vector<std::string> & _return);
  void send_getDirs();
  void recv_getDirs(std::vector<std::string> & _return);
  void getPoints(DetailQuery& _return, const DetailQuery& pq);
  void send_getPoints(const DetailQuery& pq);
  void recv_getPoints(DetailQuery& _return);
  void getCountByDir(std::map<std::string, int64_t> & _return, const std::vector<std::string> & dirs);
  void send_getCountByDir(const std::vector<std::string> & dirs);
  void recv_getCountByDir(std::map<std::string, int64_t> & _return);
  void getPointsByFullName(std::vector<PointDetail> & _return, const std::vector<std::string> & fullNames, const bool needRealData);
  void send_getPointsByFullName(const std::vector<std::string> & fullNames, const bool needRealData);
  void recv_getPointsByFullName(std::vector<PointDetail> & _return);
  void getHistoryPointsByIndividual(std::vector<HisQuery> & _return, const std::vector<HisQuery> & hq);
  void send_getHistoryPointsByIndividual(const std::vector<HisQuery> & hq);
  void recv_getHistoryPointsByIndividual(std::vector<HisQuery> & _return);
  void importHistoryPoints(std::string& _return, const std::vector<Point> & points);
  void send_importHistoryPoints(const std::vector<Point> & points);
  void recv_importHistoryPoints(std::string& _return);
  void deleteHistoryPoints(const std::vector<HisQuery> & hqs);
  void send_deleteHistoryPoints(const std::vector<HisQuery> & hqs);
  void recv_deleteHistoryPoints();
  void getPointsByName(std::vector<PointDetail> & _return, const std::vector<PointDetail> & points);
  void send_getPointsByName(const std::vector<PointDetail> & points);
  void recv_getPointsByName(std::vector<PointDetail> & _return);
  void getPointsByExName(std::vector<PointDetail> & _return, const std::vector<PointDetail> & points);
  void send_getPointsByExName(const std::vector<PointDetail> & points);
  void recv_getPointsByExName(std::vector<PointDetail> & _return);
  void putRealPointsByExName(std::string& _return, const std::vector<Point> & points);
  void send_putRealPointsByExName(const std::vector<Point> & points);
  void recv_putRealPointsByExName(std::string& _return);
  void getRealPointsByExName(std::vector<Point> & _return, const std::vector<Point> & points);
  void send_getRealPointsByExName(const std::vector<Point> & points);
  void recv_getRealPointsByExName(std::vector<Point> & _return);
  void getHistoryPointsByExName(std::vector<Point> & _return, const HisQuery& hq);
  void send_getHistoryPointsByExName(const HisQuery& hq);
  void recv_getHistoryPointsByExName(std::vector<Point> & _return);
  void test(std::string& _return, const std::string& test);
  void send_test(const std::string& test);
  void recv_test(std::string& _return);
  int64_t getCurServerTime();
  void send_getCurServerTime();
  int64_t recv_getCurServerTime();
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class XdbThriftProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::std::shared_ptr<XdbThriftIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (XdbThriftProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_putPoints(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_deletePoints(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_putRealPoints(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process__putPoints(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process__deletePoints(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process__putRealPoints(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getRealPoints(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getRealPointsWithResulMap(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getHistoryPoints(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getHistoryPointsByPage(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_checkPoint(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_validatePoint(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_createDir(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_deleteDirs(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getDirs(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getPoints(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getCountByDir(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getPointsByFullName(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getHistoryPointsByIndividual(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_importHistoryPoints(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_deleteHistoryPoints(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getPointsByName(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getPointsByExName(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_putRealPointsByExName(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getRealPointsByExName(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getHistoryPointsByExName(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_test(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getCurServerTime(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  XdbThriftProcessor(::std::shared_ptr<XdbThriftIf> iface) :
    iface_(iface) {
    processMap_["putPoints"] = &XdbThriftProcessor::process_putPoints;
    processMap_["deletePoints"] = &XdbThriftProcessor::process_deletePoints;
    processMap_["putRealPoints"] = &XdbThriftProcessor::process_putRealPoints;
    processMap_["_putPoints"] = &XdbThriftProcessor::process__putPoints;
    processMap_["_deletePoints"] = &XdbThriftProcessor::process__deletePoints;
    processMap_["_putRealPoints"] = &XdbThriftProcessor::process__putRealPoints;
    processMap_["getRealPoints"] = &XdbThriftProcessor::process_getRealPoints;
    processMap_["getRealPointsWithResulMap"] = &XdbThriftProcessor::process_getRealPointsWithResulMap;
    processMap_["getHistoryPoints"] = &XdbThriftProcessor::process_getHistoryPoints;
    processMap_["getHistoryPointsByPage"] = &XdbThriftProcessor::process_getHistoryPointsByPage;
    processMap_["checkPoint"] = &XdbThriftProcessor::process_checkPoint;
    processMap_["validatePoint"] = &XdbThriftProcessor::process_validatePoint;
    processMap_["createDir"] = &XdbThriftProcessor::process_createDir;
    processMap_["deleteDirs"] = &XdbThriftProcessor::process_deleteDirs;
    processMap_["getDirs"] = &XdbThriftProcessor::process_getDirs;
    processMap_["getPoints"] = &XdbThriftProcessor::process_getPoints;
    processMap_["getCountByDir"] = &XdbThriftProcessor::process_getCountByDir;
    processMap_["getPointsByFullName"] = &XdbThriftProcessor::process_getPointsByFullName;
    processMap_["getHistoryPointsByIndividual"] = &XdbThriftProcessor::process_getHistoryPointsByIndividual;
    processMap_["importHistoryPoints"] = &XdbThriftProcessor::process_importHistoryPoints;
    processMap_["deleteHistoryPoints"] = &XdbThriftProcessor::process_deleteHistoryPoints;
    processMap_["getPointsByName"] = &XdbThriftProcessor::process_getPointsByName;
    processMap_["getPointsByExName"] = &XdbThriftProcessor::process_getPointsByExName;
    processMap_["putRealPointsByExName"] = &XdbThriftProcessor::process_putRealPointsByExName;
    processMap_["getRealPointsByExName"] = &XdbThriftProcessor::process_getRealPointsByExName;
    processMap_["getHistoryPointsByExName"] = &XdbThriftProcessor::process_getHistoryPointsByExName;
    processMap_["test"] = &XdbThriftProcessor::process_test;
    processMap_["getCurServerTime"] = &XdbThriftProcessor::process_getCurServerTime;
  }

  virtual ~XdbThriftProcessor() {}
};

class XdbThriftProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  XdbThriftProcessorFactory(const ::std::shared_ptr< XdbThriftIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::std::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::std::shared_ptr< XdbThriftIfFactory > handlerFactory_;
};

class XdbThriftMultiface : virtual public XdbThriftIf {
 public:
  XdbThriftMultiface(std::vector<std::shared_ptr<XdbThriftIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~XdbThriftMultiface() {}
 protected:
  std::vector<std::shared_ptr<XdbThriftIf> > ifaces_;
  XdbThriftMultiface() {}
  void add(::std::shared_ptr<XdbThriftIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void putPoints(std::string& _return, const std::vector<PointDetail> & points) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->putPoints(_return, points);
    }
    ifaces_[i]->putPoints(_return, points);
    return;
  }

  void deletePoints(std::string& _return, const std::vector<PointDetail> & points, const bool delReal) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->deletePoints(_return, points, delReal);
    }
    ifaces_[i]->deletePoints(_return, points, delReal);
    return;
  }

  void putRealPoints(std::string& _return, const std::vector<Point> & points) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->putRealPoints(_return, points);
    }
    ifaces_[i]->putRealPoints(_return, points);
    return;
  }

  void _putPoints(const std::vector<PointDetail> & points) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->_putPoints(points);
    }
    ifaces_[i]->_putPoints(points);
  }

  void _deletePoints(const std::vector<PointDetail> & points, const bool delReal) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->_deletePoints(points, delReal);
    }
    ifaces_[i]->_deletePoints(points, delReal);
  }

  void _putRealPoints(const std::vector<Point> & points) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->_putRealPoints(points);
    }
    ifaces_[i]->_putRealPoints(points);
  }

  void getRealPoints(std::vector<Point> & _return, const std::vector<Point> & points) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getRealPoints(_return, points);
    }
    ifaces_[i]->getRealPoints(_return, points);
    return;
  }

  void getRealPointsWithResulMap(std::map<std::string, Point> & _return, const std::vector<Point> & points) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getRealPointsWithResulMap(_return, points);
    }
    ifaces_[i]->getRealPointsWithResulMap(_return, points);
    return;
  }

  void getHistoryPoints(std::vector<Point> & _return, const HisQuery& hq) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getHistoryPoints(_return, hq);
    }
    ifaces_[i]->getHistoryPoints(_return, hq);
    return;
  }

  void getHistoryPointsByPage(HisQuery& _return, const HisQuery& hq) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getHistoryPointsByPage(_return, hq);
    }
    ifaces_[i]->getHistoryPointsByPage(_return, hq);
    return;
  }

  bool checkPoint(const Point& p) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->checkPoint(p);
    }
    return ifaces_[i]->checkPoint(p);
  }

  void validatePoint(std::string& _return, const PointDetail& pd) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->validatePoint(_return, pd);
    }
    ifaces_[i]->validatePoint(_return, pd);
    return;
  }

  void createDir(std::string& _return, const std::vector<std::string> & dirs) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->createDir(_return, dirs);
    }
    ifaces_[i]->createDir(_return, dirs);
    return;
  }

  void deleteDirs(std::string& _return, const std::vector<std::string> & dirs) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->deleteDirs(_return, dirs);
    }
    ifaces_[i]->deleteDirs(_return, dirs);
    return;
  }

  void getDirs(std::vector<std::string> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getDirs(_return);
    }
    ifaces_[i]->getDirs(_return);
    return;
  }

  void getPoints(DetailQuery& _return, const DetailQuery& pq) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getPoints(_return, pq);
    }
    ifaces_[i]->getPoints(_return, pq);
    return;
  }

  void getCountByDir(std::map<std::string, int64_t> & _return, const std::vector<std::string> & dirs) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getCountByDir(_return, dirs);
    }
    ifaces_[i]->getCountByDir(_return, dirs);
    return;
  }

  void getPointsByFullName(std::vector<PointDetail> & _return, const std::vector<std::string> & fullNames, const bool needRealData) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getPointsByFullName(_return, fullNames, needRealData);
    }
    ifaces_[i]->getPointsByFullName(_return, fullNames, needRealData);
    return;
  }

  void getHistoryPointsByIndividual(std::vector<HisQuery> & _return, const std::vector<HisQuery> & hq) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getHistoryPointsByIndividual(_return, hq);
    }
    ifaces_[i]->getHistoryPointsByIndividual(_return, hq);
    return;
  }

  void importHistoryPoints(std::string& _return, const std::vector<Point> & points) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->importHistoryPoints(_return, points);
    }
    ifaces_[i]->importHistoryPoints(_return, points);
    return;
  }

  void deleteHistoryPoints(const std::vector<HisQuery> & hqs) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->deleteHistoryPoints(hqs);
    }
    ifaces_[i]->deleteHistoryPoints(hqs);
  }

  void getPointsByName(std::vector<PointDetail> & _return, const std::vector<PointDetail> & points) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getPointsByName(_return, points);
    }
    ifaces_[i]->getPointsByName(_return, points);
    return;
  }

  void getPointsByExName(std::vector<PointDetail> & _return, const std::vector<PointDetail> & points) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getPointsByExName(_return, points);
    }
    ifaces_[i]->getPointsByExName(_return, points);
    return;
  }

  void putRealPointsByExName(std::string& _return, const std::vector<Point> & points) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->putRealPointsByExName(_return, points);
    }
    ifaces_[i]->putRealPointsByExName(_return, points);
    return;
  }

  void getRealPointsByExName(std::vector<Point> & _return, const std::vector<Point> & points) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getRealPointsByExName(_return, points);
    }
    ifaces_[i]->getRealPointsByExName(_return, points);
    return;
  }

  void getHistoryPointsByExName(std::vector<Point> & _return, const HisQuery& hq) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getHistoryPointsByExName(_return, hq);
    }
    ifaces_[i]->getHistoryPointsByExName(_return, hq);
    return;
  }

  void test(std::string& _return, const std::string& test) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->test(_return, test);
    }
    ifaces_[i]->test(_return, test);
    return;
  }

  int64_t getCurServerTime() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getCurServerTime();
    }
    return ifaces_[i]->getCurServerTime();
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class XdbThriftConcurrentClient : virtual public XdbThriftIf {
 public:
  XdbThriftConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(prot);
  }
  XdbThriftConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void putPoints(std::string& _return, const std::vector<PointDetail> & points);
  int32_t send_putPoints(const std::vector<PointDetail> & points);
  void recv_putPoints(std::string& _return, const int32_t seqid);
  void deletePoints(std::string& _return, const std::vector<PointDetail> & points, const bool delReal);
  int32_t send_deletePoints(const std::vector<PointDetail> & points, const bool delReal);
  void recv_deletePoints(std::string& _return, const int32_t seqid);
  void putRealPoints(std::string& _return, const std::vector<Point> & points);
  int32_t send_putRealPoints(const std::vector<Point> & points);
  void recv_putRealPoints(std::string& _return, const int32_t seqid);
  void _putPoints(const std::vector<PointDetail> & points);
  int32_t send__putPoints(const std::vector<PointDetail> & points);
  void recv__putPoints(const int32_t seqid);
  void _deletePoints(const std::vector<PointDetail> & points, const bool delReal);
  int32_t send__deletePoints(const std::vector<PointDetail> & points, const bool delReal);
  void recv__deletePoints(const int32_t seqid);
  void _putRealPoints(const std::vector<Point> & points);
  int32_t send__putRealPoints(const std::vector<Point> & points);
  void recv__putRealPoints(const int32_t seqid);
  void getRealPoints(std::vector<Point> & _return, const std::vector<Point> & points);
  int32_t send_getRealPoints(const std::vector<Point> & points);
  void recv_getRealPoints(std::vector<Point> & _return, const int32_t seqid);
  void getRealPointsWithResulMap(std::map<std::string, Point> & _return, const std::vector<Point> & points);
  int32_t send_getRealPointsWithResulMap(const std::vector<Point> & points);
  void recv_getRealPointsWithResulMap(std::map<std::string, Point> & _return, const int32_t seqid);
  void getHistoryPoints(std::vector<Point> & _return, const HisQuery& hq);
  int32_t send_getHistoryPoints(const HisQuery& hq);
  void recv_getHistoryPoints(std::vector<Point> & _return, const int32_t seqid);
  void getHistoryPointsByPage(HisQuery& _return, const HisQuery& hq);
  int32_t send_getHistoryPointsByPage(const HisQuery& hq);
  void recv_getHistoryPointsByPage(HisQuery& _return, const int32_t seqid);
  bool checkPoint(const Point& p);
  int32_t send_checkPoint(const Point& p);
  bool recv_checkPoint(const int32_t seqid);
  void validatePoint(std::string& _return, const PointDetail& pd);
  int32_t send_validatePoint(const PointDetail& pd);
  void recv_validatePoint(std::string& _return, const int32_t seqid);
  void createDir(std::string& _return, const std::vector<std::string> & dirs);
  int32_t send_createDir(const std::vector<std::string> & dirs);
  void recv_createDir(std::string& _return, const int32_t seqid);
  void deleteDirs(std::string& _return, const std::vector<std::string> & dirs);
  int32_t send_deleteDirs(const std::vector<std::string> & dirs);
  void recv_deleteDirs(std::string& _return, const int32_t seqid);
  void getDirs(std::vector<std::string> & _return);
  int32_t send_getDirs();
  void recv_getDirs(std::vector<std::string> & _return, const int32_t seqid);
  void getPoints(DetailQuery& _return, const DetailQuery& pq);
  int32_t send_getPoints(const DetailQuery& pq);
  void recv_getPoints(DetailQuery& _return, const int32_t seqid);
  void getCountByDir(std::map<std::string, int64_t> & _return, const std::vector<std::string> & dirs);
  int32_t send_getCountByDir(const std::vector<std::string> & dirs);
  void recv_getCountByDir(std::map<std::string, int64_t> & _return, const int32_t seqid);
  void getPointsByFullName(std::vector<PointDetail> & _return, const std::vector<std::string> & fullNames, const bool needRealData);
  int32_t send_getPointsByFullName(const std::vector<std::string> & fullNames, const bool needRealData);
  void recv_getPointsByFullName(std::vector<PointDetail> & _return, const int32_t seqid);
  void getHistoryPointsByIndividual(std::vector<HisQuery> & _return, const std::vector<HisQuery> & hq);
  int32_t send_getHistoryPointsByIndividual(const std::vector<HisQuery> & hq);
  void recv_getHistoryPointsByIndividual(std::vector<HisQuery> & _return, const int32_t seqid);
  void importHistoryPoints(std::string& _return, const std::vector<Point> & points);
  int32_t send_importHistoryPoints(const std::vector<Point> & points);
  void recv_importHistoryPoints(std::string& _return, const int32_t seqid);
  void deleteHistoryPoints(const std::vector<HisQuery> & hqs);
  int32_t send_deleteHistoryPoints(const std::vector<HisQuery> & hqs);
  void recv_deleteHistoryPoints(const int32_t seqid);
  void getPointsByName(std::vector<PointDetail> & _return, const std::vector<PointDetail> & points);
  int32_t send_getPointsByName(const std::vector<PointDetail> & points);
  void recv_getPointsByName(std::vector<PointDetail> & _return, const int32_t seqid);
  void getPointsByExName(std::vector<PointDetail> & _return, const std::vector<PointDetail> & points);
  int32_t send_getPointsByExName(const std::vector<PointDetail> & points);
  void recv_getPointsByExName(std::vector<PointDetail> & _return, const int32_t seqid);
  void putRealPointsByExName(std::string& _return, const std::vector<Point> & points);
  int32_t send_putRealPointsByExName(const std::vector<Point> & points);
  void recv_putRealPointsByExName(std::string& _return, const int32_t seqid);
  void getRealPointsByExName(std::vector<Point> & _return, const std::vector<Point> & points);
  int32_t send_getRealPointsByExName(const std::vector<Point> & points);
  void recv_getRealPointsByExName(std::vector<Point> & _return, const int32_t seqid);
  void getHistoryPointsByExName(std::vector<Point> & _return, const HisQuery& hq);
  int32_t send_getHistoryPointsByExName(const HisQuery& hq);
  void recv_getHistoryPointsByExName(std::vector<Point> & _return, const int32_t seqid);
  void test(std::string& _return, const std::string& test);
  int32_t send_test(const std::string& test);
  void recv_test(std::string& _return, const int32_t seqid);
  int64_t getCurServerTime();
  int32_t send_getCurServerTime();
  int64_t recv_getCurServerTime(const int32_t seqid);
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif



#endif
