/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef xdb_TYPES_H
#define xdb_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <functional>
#include <memory>




class PointDetail;

class Point;

class HisQuery;

class DetailQuery;

typedef struct _PointDetail__isset {
  _PointDetail__isset() : name(false), dir(false), unit(false), desc(false), exName(false), minValue(false), maxValue(false), lowValue(false), middleValue(false), highValue(false), curValue(false), time(false), bussType(false) {}
  bool name :1;
  bool dir :1;
  bool unit :1;
  bool desc :1;
  bool exName :1;
  bool minValue :1;
  bool maxValue :1;
  bool lowValue :1;
  bool middleValue :1;
  bool highValue :1;
  bool curValue :1;
  bool time :1;
  bool bussType :1;
} _PointDetail__isset;

class PointDetail : public virtual ::apache::thrift::TBase {
 public:

  PointDetail(const PointDetail&);
  PointDetail& operator=(const PointDetail&);
  PointDetail() : name(), dir(), unit(), desc(), exName(), minValue(0), maxValue(0), lowValue(0), middleValue(0), highValue(0), curValue(0), time(0), bussType() {
  }

  virtual ~PointDetail() noexcept;
  std::string name;
  std::string dir;
  std::string unit;
  std::string desc;
  std::string exName;
  double minValue;
  double maxValue;
  double lowValue;
  double middleValue;
  double highValue;
  double curValue;
  int64_t time;
  std::string bussType;

  _PointDetail__isset __isset;

  void __set_name(const std::string& val);

  void __set_dir(const std::string& val);

  void __set_unit(const std::string& val);

  void __set_desc(const std::string& val);

  void __set_exName(const std::string& val);

  void __set_minValue(const double val);

  void __set_maxValue(const double val);

  void __set_lowValue(const double val);

  void __set_middleValue(const double val);

  void __set_highValue(const double val);

  void __set_curValue(const double val);

  void __set_time(const int64_t val);

  void __set_bussType(const std::string& val);

  bool operator == (const PointDetail & rhs) const
  {
    if (!(name == rhs.name))
      return false;
    if (!(dir == rhs.dir))
      return false;
    if (!(unit == rhs.unit))
      return false;
    if (!(desc == rhs.desc))
      return false;
    if (!(exName == rhs.exName))
      return false;
    if (!(minValue == rhs.minValue))
      return false;
    if (!(maxValue == rhs.maxValue))
      return false;
    if (!(lowValue == rhs.lowValue))
      return false;
    if (!(middleValue == rhs.middleValue))
      return false;
    if (!(highValue == rhs.highValue))
      return false;
    if (!(curValue == rhs.curValue))
      return false;
    if (!(time == rhs.time))
      return false;
    if (!(bussType == rhs.bussType))
      return false;
    return true;
  }
  bool operator != (const PointDetail &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PointDetail & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(PointDetail &a, PointDetail &b);

std::ostream& operator<<(std::ostream& out, const PointDetail& obj);

typedef struct _Point__isset {
  _Point__isset() : name(false), dir(false), value(false), time(false), exName(false) {}
  bool name :1;
  bool dir :1;
  bool value :1;
  bool time :1;
  bool exName :1;
} _Point__isset;

class Point : public virtual ::apache::thrift::TBase {
 public:

  Point(const Point&);
  Point& operator=(const Point&);
  Point() : name(), dir(), value(0), time(0), exName() {
  }

  virtual ~Point() noexcept;
  std::string name;
  std::string dir;
  double value;
  int64_t time;
  std::string exName;

  _Point__isset __isset;

  void __set_name(const std::string& val);

  void __set_dir(const std::string& val);

  void __set_value(const double val);

  void __set_time(const int64_t val);

  void __set_exName(const std::string& val);

  bool operator == (const Point & rhs) const
  {
    if (!(name == rhs.name))
      return false;
    if (!(dir == rhs.dir))
      return false;
    if (!(value == rhs.value))
      return false;
    if (!(time == rhs.time))
      return false;
    if (!(exName == rhs.exName))
      return false;
    return true;
  }
  bool operator != (const Point &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Point & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(Point &a, Point &b);

std::ostream& operator<<(std::ostream& out, const Point& obj);

typedef struct _HisQuery__isset {
  _HisQuery__isset() : name(false), dir(false), startTime(false), endTime(false), isFilter(false), minValue(false), maxValue(false), interval(false), pageSize(false), nextTime(false), aggType(false), results(false), sdtDelta(false) {}
  bool name :1;
  bool dir :1;
  bool startTime :1;
  bool endTime :1;
  bool isFilter :1;
  bool minValue :1;
  bool maxValue :1;
  bool interval :1;
  bool pageSize :1;
  bool nextTime :1;
  bool aggType :1;
  bool results :1;
  bool sdtDelta :1;
} _HisQuery__isset;

class HisQuery : public virtual ::apache::thrift::TBase {
 public:

  HisQuery(const HisQuery&);
  HisQuery& operator=(const HisQuery&);
  HisQuery() : name(), dir(), startTime(0), endTime(0), isFilter(0), minValue(0), maxValue(0), interval(0), pageSize(0), nextTime(0), aggType(0), sdtDelta(0) {
  }

  virtual ~HisQuery() noexcept;
  std::string name;
  std::string dir;
  int64_t startTime;
  int64_t endTime;
  bool isFilter;
  double minValue;
  double maxValue;
  int32_t interval;
  int32_t pageSize;
  int64_t nextTime;
  int32_t aggType;
  std::vector<Point>  results;
  double sdtDelta;

  _HisQuery__isset __isset;

  void __set_name(const std::string& val);

  void __set_dir(const std::string& val);

  void __set_startTime(const int64_t val);

  void __set_endTime(const int64_t val);

  void __set_isFilter(const bool val);

  void __set_minValue(const double val);

  void __set_maxValue(const double val);

  void __set_interval(const int32_t val);

  void __set_pageSize(const int32_t val);

  void __set_nextTime(const int64_t val);

  void __set_aggType(const int32_t val);

  void __set_results(const std::vector<Point> & val);

  void __set_sdtDelta(const double val);

  bool operator == (const HisQuery & rhs) const
  {
    if (!(name == rhs.name))
      return false;
    if (!(dir == rhs.dir))
      return false;
    if (!(startTime == rhs.startTime))
      return false;
    if (!(endTime == rhs.endTime))
      return false;
    if (!(isFilter == rhs.isFilter))
      return false;
    if (!(minValue == rhs.minValue))
      return false;
    if (!(maxValue == rhs.maxValue))
      return false;
    if (!(interval == rhs.interval))
      return false;
    if (!(pageSize == rhs.pageSize))
      return false;
    if (!(nextTime == rhs.nextTime))
      return false;
    if (!(aggType == rhs.aggType))
      return false;
    if (!(results == rhs.results))
      return false;
    if (!(sdtDelta == rhs.sdtDelta))
      return false;
    return true;
  }
  bool operator != (const HisQuery &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HisQuery & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(HisQuery &a, HisQuery &b);

std::ostream& operator<<(std::ostream& out, const HisQuery& obj);

typedef struct _DetailQuery__isset {
  _DetailQuery__isset() : name(false), dir(false), exName(false), desc(false), pageSize(false), lastKey(false), type(false), hasNext(false), results(false), unit(false) {}
  bool name :1;
  bool dir :1;
  bool exName :1;
  bool desc :1;
  bool pageSize :1;
  bool lastKey :1;
  bool type :1;
  bool hasNext :1;
  bool results :1;
  bool unit :1;
} _DetailQuery__isset;

class DetailQuery : public virtual ::apache::thrift::TBase {
 public:

  DetailQuery(const DetailQuery&);
  DetailQuery& operator=(const DetailQuery&);
  DetailQuery() : name(), dir(), exName(), desc(), pageSize(0), lastKey(), type(0), hasNext(0), unit() {
  }

  virtual ~DetailQuery() noexcept;
  std::string name;
  std::string dir;
  std::string exName;
  std::string desc;
  int32_t pageSize;
  std::string lastKey;
  int32_t type;
  bool hasNext;
  std::vector<PointDetail>  results;
  std::string unit;

  _DetailQuery__isset __isset;

  void __set_name(const std::string& val);

  void __set_dir(const std::string& val);

  void __set_exName(const std::string& val);

  void __set_desc(const std::string& val);

  void __set_pageSize(const int32_t val);

  void __set_lastKey(const std::string& val);

  void __set_type(const int32_t val);

  void __set_hasNext(const bool val);

  void __set_results(const std::vector<PointDetail> & val);

  void __set_unit(const std::string& val);

  bool operator == (const DetailQuery & rhs) const
  {
    if (!(name == rhs.name))
      return false;
    if (!(dir == rhs.dir))
      return false;
    if (!(exName == rhs.exName))
      return false;
    if (!(desc == rhs.desc))
      return false;
    if (!(pageSize == rhs.pageSize))
      return false;
    if (!(lastKey == rhs.lastKey))
      return false;
    if (!(type == rhs.type))
      return false;
    if (!(hasNext == rhs.hasNext))
      return false;
    if (!(results == rhs.results))
      return false;
    if (!(unit == rhs.unit))
      return false;
    return true;
  }
  bool operator != (const DetailQuery &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DetailQuery & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(DetailQuery &a, DetailQuery &b);

std::ostream& operator<<(std::ostream& out, const DetailQuery& obj);



#endif
